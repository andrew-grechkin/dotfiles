# vim: filetype=sh
# shellcheck shell=bash

# usage:
#   source dev.rc
#   source "$(git rev-parse --show-toplevel)/dev.rc"

# => environment -------------------------------------------------------------------------------------------------- {{{1

PERL_VERSION_REQUIRED="${PERL_VERSION_REQUIRED:-5.42.0}"
PERL_VENV_DIR_SUFFIX="${PERL_VENV_DIR_SUFFIX:-$(hostname)}"

# detect git repo root or use dir of the script
if command git rev-parse HEAD &>/dev/null; then
	workdir="$(git rev-parse --show-toplevel)"
else
	script="$(realpath -s "${BASH_SOURCE:-$0}")"
	workdir="$(dirname "$script")"
fi
workdir_rel=$(realpath -m --relative-base="$PWD" "$workdir")

# enforce local .perlcriticrc if it exists
perlcritic_path="$workdir/.perlcriticrc"
if [[ -r "$perlcritic_path" ]]; then
	export PERLCRITIC="$perlcritic_path"
fi

export perl_root="$workdir/.perl-${PERL_VERSION_REQUIRED}${PERL_VENV_DIR_SUFFIX:+@$PERL_VENV_DIR_SUFFIX}"

# => install default perl and library ----------------------------------------------------------------------------- {{{1

function maybe_install_perl() {
	if [[ ! -x "$perl_root/bin/perl" ]]; then
		# curl -fsSL https://raw.githubusercontent.com/skaji/relocatable-perl/main/perl-install | bash -s "$perl_root"
		[[ -x "$(command -v bsdtar)" ]] || {
			>&2 echo "bsdtar is not found, please install it for your system"
			return 1
		}

		os=$(uname -s | tr '[:upper:]' '[:lower:]')
		arch=$(uname -m)

		if [[ $arch = x86_64 ]]; then
			arch=amd64
		elif [[ $arch = aarch64 ]]; then
			arch=arm64
		fi

		first_match=$(curl -fsSL 'https://raw.githubusercontent.com/skaji/relocatable-perl/main/releases.csv' 2>/dev/null \
			| command grep -m 1 -P "^$PERL_VERSION_REQUIRED.*?,$os,$arch,")

		if [[ -z "$first_match" ]]; then
			>&2 echo "Failed to match required perl version: $PERL_VERSION_REQUIRED"
			return 1
		fi

		perl_version=$(echo "$first_match" | cut -d, -f1)
		perl_url=$(echo "$first_match" | cut -d, -f5)

		echo "First time local perl environment initialization..."
		echo "Installing perl $perl_version to '$perl_root'..."

		>/dev/null mkdir -p "$perl_root"
		curl -fsSL "$perl_url" | bsdtar -xf - --strip-components 1 -C "$perl_root"
		if [[ ! -x $perl_root/bin/perl ]]; then
			>&2 "Failed to install perl"
			return 1
		fi
	fi

	# make perl from virtual environment the default one in the current terminal session
	PATH="$perl_root/bin:$PATH"
	[[ -d "$workdir/script" ]] && ! grep -F ":$workdir/script:" <<<":$PATH:" &>/dev/null && PATH=":$workdir/script:$PATH"
	[[ -d "$workdir/bin"    ]] && ! grep -F ":$workdir/bin:"    <<<":$PATH:" &>/dev/null && PATH=":$workdir/bin:$PATH"

	PERL5LIB="$HOME/.local/lib/perl5:./lib"
	[[ -d "$workdir/lib"   ]] && ! grep -F ":$workdir/lib:"   <<<":$PERL5LIB:" &>/dev/null && PERL5LIB="$workdir/lib:$PERL5LIB"
	[[ -d "$workdir/perl5" ]] && ! grep -F ":$workdir/perl5:" <<<":$PERL5LIB:" &>/dev/null && PERL5LIB="$workdir/perl5:$PERL5LIB"

	export PATH PERL5LIB

	return 0
}

function maybe_install_modules() {
	# necesary for the case when perlbrew or another perl virtual env is activated in current session to deactivate it
	unset PERL_LOCAL_LIB_ROOT
	unset PERL_MB_OPT
	unset PERL_MM_OPT

	export PERL_CPANM_HOME="${PERL_CPANM_HOME:-${XDG_CACHE_HOME:-$HOME/.cache}/cpanm}"

	{
		if [[ -r "$workdir/cpanfile" ]] && [[ ! -f "$perl_root/finished" || "$perl_root/finished" -ot "$workdir/cpanfile" ]]; then
			nice cpanm -nq "https://github.com/andrew-grechkin/yaml-libyaml-pm/archive/refs/heads/master.zip"
			echo "Installing required modules from '$workdir_rel/cpanfile', this may take a while..."
			nice cpanm -nq --installdeps "$workdir" && touch "$perl_root/finished"
		fi

		if [[ -r "$workdir/t/cpanfile" ]] && [[ ! -f "$perl_root/finished-t" || "$perl_root/finished-t" -ot "$workdir/t/cpanfile" ]]; then
			echo "Installing required modules from '$workdir_rel/t/cpanfile', this may take a while..."
			nice cpanm -nq --installdeps "$workdir/t" && touch "$perl_root/finished-t"
		fi
		# filter out warnings about archives created on alien systems with unknown extensions
	} 2>&1 | grep -Ev 'LIBARCHIVE[.]xattr[.]com[.](apple|macromates)'

	return 0
}

# => -------------------------------------------------------------------------------------------------------------- {{{1

maybe_install_perl && maybe_install_modules
