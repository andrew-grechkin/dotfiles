# vim: filetype=sh
# shellcheck shell=bash

# usage:
#   source "$(git rev-parse --show-toplevel)/dev.rc"

# => environment -------------------------------------------------------------------------------------------------- {{{1

REQUIRED_PERL_VERSION="${REQUIRED_PERL_VERSION:-5.40.0}"

if command git rev-parse HEAD &>/dev/null; then
	REPO_ROOT="$(git rev-parse --show-toplevel)"
else
	SCRIPT=$(realpath -s "$0")
	REPO_ROOT=$(dirname "$SCRIPT")
fi

PERLCRITIC_PATH="$REPO_ROOT/.perlcriticrc"
if [[ -r "$PERLCRITIC_PATH" ]]; then
	export PERLCRITIC="$PERLCRITIC_PATH"
fi

export PERL_ROOT="$REPO_ROOT/.perlenv-$REQUIRED_PERL_VERSION"

export PATH="$REPO_ROOT/bin:$REPO_ROOT/script:$PERL_ROOT/bin:$PATH"
export PERL5LIB="$REPO_ROOT/lib:$HOME/.local/lib/perl5:./lib"

# => install default perl and library ----------------------------------------------------------------------------- {{{1

function install_perl() {
	if [[ ! -e "$PERL_ROOT/bin/perl" ]]; then
		# curl -fsSL https://raw.githubusercontent.com/skaji/relocatable-perl/main/perl-install | bash -s "$PERL_ROOT"

		os=$(uname -s | tr '[:upper:]' '[:lower:]')
		arch=$(uname -m)

		if [[ $arch = x86_64 ]]; then
			arch=amd64
		elif [[ $arch = aarch64 ]]; then
			arch=arm64
		fi

		first_match=$(curl -fsSL 'https://raw.githubusercontent.com/skaji/relocatable-perl/main/releases.csv' 2>/dev/null \
			| command grep -m 1 -P "^$REQUIRED_PERL_VERSION.*?,$os,$arch,")

		if [[ -z "$first_match" ]]; then
			>/dev/stderr echo "Failed to match required perl version: $REQUIRED_PERL_VERSION"
			return 1
		fi

		perl_version=$(echo "$first_match" | \cut -d, -f1)
		perl_url=$(echo "$first_match" | \cut -d, -f5)

		echo "Installing perl $perl_version to $PERL_ROOT, this may take a while..."

		>/dev/null mkdir -p "$PERL_ROOT"
		curl -fsSL "$perl_url" | bsdtar -xf - --strip-components 1 -C "$PERL_ROOT"
		if [[ ! -f $PERL_ROOT/bin/perl ]]; then
			>/dev/stderr "Failed to install perl"
			return 1
		fi

		if [[ "$SHELL" =~ zsh ]]; then
			rehash
		fi
	fi
	return 0
}

function install_modules() {
	if [ ! -f "$PERL_ROOT/finished" ]; then
		[[ -r "$REPO_ROOT/cpanfile" ]] && {
			echo
			echo "Installing required modules from '$REPO_ROOT/cpanfile'"
			nice cpanm -nq --installdeps "$REPO_ROOT" 2>&1 | grep -vF 'LIBARCHIVE.xattr.com.apple.provenance'
			touch "$PERL_ROOT/finished"
		}
	fi
	return 0
}

# => -------------------------------------------------------------------------------------------------------------- {{{1

unset PERL_LOCAL_LIB_ROOT
unset PERL_MB_OPT
unset PERL_MM_OPT

install_perl && install_modules
