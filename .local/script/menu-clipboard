#!/usr/bin/env perl

use v5.40;
use autodie;
use open ':locale';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(declared_refs refaliasing);

use English    qw(-no_match_vars);
use IPC::Open2 qw(open2);
use JSON::PP   qw();

use constant {
    'JSON_ONE_LINE' => JSON::PP->new->canonical->utf8(0)->boolean_values(false, true)->pretty(0)->indent(0),
    'ABORTED'       => 130,
};

sub main {
    my \@history = fetch_history();

    my @cmd = (
        'fzf',                                                  '--ansi',
        '--reverse',                                            "--delimiter=\t",
        '--no-multi',                                           '--with-nth=2',
        q(--preview=jq -Rrn 'inputs | fromjson' <<< '"'{2}'"'), '--bind=ctrl-y:execute-silent()',
        '--preview-window=right:50%:border-left:wrap:nohidden', '--prompt=clipboard history >',
    );

    my $pid = open2(my $chld_out, my $chld_in, @cmd) // do {
        say {*STDERR} 'failed to execute fzf';
        return 1;
    };
    binmode($chld_in, ':encoding(UTF-8)');

    foreach my ($index, $value) (builtin::indexed(@history)) {
        say {$chld_in} ($index, "\t", JSON_ONE_LINE()->encode($value) =~ s{^"|"$}{}rg);
    }
    close $chld_in;

    waitpid($pid, 0)
        or die "unable to wait for child to finish: $!\n";

    my $child_exit_status = $CHILD_ERROR >> 8;
    exit if $child_exit_status == ABORTED();

    my $out = <$chld_out>;
    close $chld_out;

    my ($num) = split m/\t/, $out, 2;

    save_to_clipboard($history[$num]) if defined $num;

    return 0;
}

sub fetch_history() {
    my \%payload = JSON_ONE_LINE()
        ->decode(
        `busctl --user --json=short call org.kde.klipper /klipper org.kde.klipper.klipper getClipboardHistoryMenu`);

    # ignore images and empty lines
    my @m = grep {$_ && !m/â–¨/g} ($payload{data}[0] // [])->@*;

    return \@m;
}

sub save_to_clipboard($str) {
    open(my $pipe => '|-', 'clipcopy')
        or die $!;
    print {$pipe} $str;
    close $pipe
        or die $!;
    return;
}

exit main();

__END__
