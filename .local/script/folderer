#!/usr/bin/env perl

use v5.36;
use autodie;
use open ':locale';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

use Encode       qw(decode);
use Getopt::Long qw(:config auto_version bundling no_ignore_case);

use Path::Tiny qw(path);

our $VERSION = 1;

my %options = (
    'APPLY'   => 0,
    'FOLLOW'  => 0,
    'MATCH'   => '(\d{4}-\d{2})(?:-\d{2})?',
    'RECURSE' => 0,
);

sub main() {
    GetOptions(
        'apply|a'   => \$options{'APPLY'},
        'follow|f'  => \$options{'FOLLOW'},
        'match|m'   => \$options{'MATCH'},
        'recurse|r' => \$options{'RECURSE'},
    ) or die "Unable to process command line options\n";

    my $match = qr{$options{'MATCH'}};

    my \%state = path('.')->visit(
        sub {
            my ($path, $state) = @_;
            $path !~ m/\@eaDir/
                or return;

            $path->is_file
                or return;

            push($state->{'files'}->@*, path(decode('UTF-8', $path->stringify, Encode::FB_CROAK)));
        },
        {
            'follow_symlinks' => $options{'FOLLOW'},
            'recurse'         => $options{'RECURSE'},
        },
    );

    foreach my $path ($state{'files'}->@*) {
        my $parent = $path->parent;

        # check if already moved
        next if $parent->basename =~ $match;

        my $name = $path->basename;
        if ($name =~ $match) {
            next unless $1;

            my $new_dir = $parent->child($1);
            if ($options{'APPLY'}) {
                $new_dir->exists or do {
                    say 'Creating directory: ', $new_dir;
                    $new_dir->mkpath;
                };
            }

            my $new_path = $new_dir->child($name);
            say 'Moving: ', join(' -> ', $path, $new_path);
            $path->move($new_path) if $options{'APPLY'};
        }
    }

    return 0;
}

exit main();

__END__
