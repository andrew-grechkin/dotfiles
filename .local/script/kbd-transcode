#!/usr/bin/env perl

use v5.36;
use autodie;
use open ':locale';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

# sub convert ($map_in, $map_out, @chars) {
# $map_in && $map_out
# or return @chars;
#
# my @updated;
# foreach my $char (@chars) {
# my $pos = index ($map_in, $char);
# $pos < 0
# ? push (@updated, $char)
# : push (@updated, substr ($map_out, $pos, 1));
# }
# return @updated;
# }

my $input   = <<>>;
my @chars   = split(m//, $input // '');
my %key_map = (
    'en' => q{F<DULT~;PBQRKVYJGHCNEA{WXIO}SM">Zf,dult`;pbqrkvyjghcnea[wxio]sm'.z},
    'ru' => q{АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя},
);

my ($map_in, $map_out);
foreach my $char (@chars) {
    index($key_map{'en'}, $char) >= 0
        and $map_in = $key_map{'en'}
        and $map_out = $key_map{'ru'}
        and last;
    index($key_map{'ru'}, $char) >= 0
        and $map_in = $key_map{'ru'}
        and $map_out = $key_map{'en'}
        and last;
}

## no critic [BuiltinFunctions::ProhibitStringyEval,ErrorHandling::RequireCheckingReturnValueOfEval,Lax::ProhibitStringyEval::ExceptForRequire]
eval "print \$input =~ tr[$map_in][$map_out]r; 1";

# print join ('', convert($map_in, $map_out, @chars));

# test
# my @enchars = split (m//, $key_map{'en'});
# my @entoru  = convert($key_map{'en'}, $key_map{'ru'}, @enchars);
# my @rutoen  = convert($key_map{'ru'}, $key_map{'en'}, @entoru);
# unless (@enchars ~~ @rutoen) {
# say @enchars;
# say @rutoen;
# say @entoru;
# die 'Wrong sets';
# }
