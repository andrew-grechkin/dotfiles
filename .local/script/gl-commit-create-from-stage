#!/usr/bin/env bash

set -Eeuo pipefail

# => getopt ------------------------------------------------------------------------------------------------------- {{{1

args="$(getopt --name="$0" --options 'h:p:b:m:' --longoptions 'host:,project:,branch:,message:' -- "$@")"
eval set -- "$args"

# shellcheck disable=SC2078
while [ : ]; do
	case "$1" in
		-h | --host) HOST="$2"; shift 2 ;;
		-p | --project) PROJECT="$2"; shift 2 ;;
		-b | --branch) BRANCH="$2"; shift 2 ;;
		-m | --message) message="$2"; shift 2 ;;
		--) shift; break ;;
	esac
done

# => defaults ----------------------------------------------------------------------------------------------------- {{{1

source "$HOME/.local/lib/shell/gitlab.bash"

# => requirements ------------------------------------------------------------------------------------------------- {{{1

[[ -z "${BRANCH:-}" ]]  && { echo "error: branch is required" >/dev/stderr; exit 1; }
[[ -z "${message:-}" ]] && { echo "error: message is required" >/dev/stderr; exit 1; }

# => -------------------------------------------------------------------------------------------------------------- {{{1

if [[ -t 1 ]]; then
	"$0" -b "$BRANCH" -m "$message" | gl-commit-create -h "$HOST" -p "$PROJECT"
else
	if ! changes="$(git status --porcelain | grep -P '^A|^D|^M')"; then
		echo 'nothing to do' >/dev/stderr
		exit 0
	fi

	jq_convert=$(cat <<- 'EO_ACTION'
		{
			"action": (if $a == "A" then "create" elif $a == "D" then "delete" elif $a == "M" then "update" else "undef" end),
			"file_path": $file,
        } | if ($a != "D") then .content = $content end
		EO_ACTION
	)

    # shellcheck disable=SC2016
	if actions="$(echo "$changes" \
		| xargs -n 2 bash -c '
			set -e;
			[[ "$0" == "D" || -r "$1" ]] || { echo file not found: "$1" >/dev/stderr; exit 2; }
			pth="$1"
			[[ "$0" == "D" ]] && { pth=/dev/null; }
			jq -nc --arg a "$0" --rawfile content "$pth" --arg file "$1" '\'"$jq_convert"\'
	)"; then
		echo "$actions" \
			| jq -cnR --arg branch "$BRANCH" --arg message "$message" '{
			branch: $branch,
			commit_message: $message,
			actions: [inputs | fromjson]
		}'
	fi
fi
