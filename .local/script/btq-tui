#!/usr/bin/env bash
# shellcheck disable=SC2016

[[ -x "$(command -v argc)" ]] || {
    echo "'argc' helper command is required, install from https://github.com/sigoden/argc" >&2
    exit 2
}

# @describe BTQ tui
#
# ðŸ„¯ 2025 Andrew Grechkin
# LICENSE:
#     GPL-2.0-or-later

# @meta version 1.0.0
# @meta combine-shorts
# @meta require-tools fzf-table,jq,tsp

# @flag -j --json  Output result as json

eval "$(argc --argc-eval "$0" "$@")"

# => -------------------------------------------------------------------------------------------------------------- {{{1

if [[ -n "${argc_json:-}" ]]; then
    tsp -l
elif [[ -t 1 ]]; then
    export FZF_RELOAD_CMD="$0"
    fzf_args=(
        --bind='alt-A:execute-silent(cd $(tsp -i {1} | jq -r .cwd) && tsp $(tsp -i {1} | jq -r .cmd[]))'"+reload($FZF_RELOAD_CMD)"
        --bind='alt-C:execute-silent(fzf-run-reload <<< "echo Cleaning up finished tasks...; '"$0"' -j | jq -r ".[].output" | xargs -r rm -f; tsp -C")'
        --bind='alt-R:execute-silent(fzf-run-reload -- echo Killing task {1}; tsp -k {1})'
        --bind='alt-i:execute( { tsp -i {1}; echo; echo Output:; cat `tsp -o {1}`; } | ${PAGER:-less})'
        --bind='alt-t:execute(less --follow-name +F `tsp -o {1}`)'
        --footer='A-A:again A-C:clean A-R:kill A-i:inspect A-t:tail'
        --preview='tsp -i {1} | json2yaml; echo; echo Output:; cat `tsp -o {1}` | head -n 300'
        --preview-window='right:50%:border-left:wrap:nohidden,<55(hidden)'
        --prompt='btq > '
        --tiebreak='begin,chunk'
        --with-nth='3..'
    )
    "$0" | fzf-table "${fzf_args[@]}"
else
    jq_fields=(
        '_id;\(.id)'
        '_url;\(\"file://\(.out)\")'
        'pid;\(.pid);olive'
        'status;\(.status | if . == "failed" then "${FG[red]}\(.)" elif . == "finished" then "${FG[lime]}\(.)" end)${FX[reset]}'
        'ecode;\(.exit_code | if . == null then "" elif . != 0 then "${FG[red]}\(.)" else "${FG[lime]}\(.)" end)${FX[reset]}'
        'created;\(.start[0:19]);green'
        'finish;\(.finish | if . then .[0:19] else "" end);blue'
        'cmd;\(.shell);silver'
    )
    "$0" -j | json2table 'sort_by(.start) | [(map(select(.finish | not))[]), (map(select(.finish)) | reverse[])]' "${jq_fields[@]}"
fi
