#!/usr/bin/env perl

use v5.40;
use open 'IO' => ':raw';
use experimental qw(class declared_refs defer refaliasing);
use utf8;

use Cpanel::JSON::XS qw();
use Time::Moment     qw();

use constant {
    E7_DIV        => 1e7,
    JSON          => Cpanel::JSON::XS->new->canonical->utf8(1)->unblessed_bool([1])->pretty(0)->indent(0),
    REQUIRED_KEYS => ['timestamp', 'latitudeE7', 'longitudeE7', 'accuracy'],
    UMASK         => 0x002,
};

umask UMASK()
    or die "Unable to set umask: $!\n";

@ARGV
    or push @ARGV, 'data.jsonl';

sub validate($data_href) {
    for my $key (REQUIRED_KEYS()->@*) {
        if (!exists $data_href->{$key}) {
            warn sprintf "In record: %s\n", JSON()->encode($data_href);
            die "Absent required key: $key\n";
        }
    }

    return;
}

sub save_path($timestamp) {
    my $ts = Time::Moment->from_string($timestamp)->at_utc->with_precision(0);
    say {*STDERR} sprintf 'processing: %s', $ts->to_string;
    return sprintf '%04d-%02d.rec', $ts->year, $ts->month;
}

sub convert_old($data_href) {
    my \%data = $data_href;

    # https://owntracks.org/booklet/features/tid/
    my %subset = (_type => 'location', tid => ($ENV{tid} // 'p4'));

    my $ts = Time::Moment->from_string($data{deviceTimestamp} // $data{timestamp})->at_utc->with_precision(0);
    $subset{tst} = $ts->epoch;
    $subset{lat} = $data{latitudeE7} / E7_DIV();
    $subset{lon} = $data{longitudeE7} / E7_DIV();
    $subset{acc} = $data{accuracy};

    $subset{alt} = $data{altitude}                if defined $data{altitude};
    $subset{bs}  = $data{batteryCharging} ? 2 : 1 if defined $data{batteryCharging};
    $subset{vac} = $data{verticalAccuracy}        if defined $data{verticalAccuracy};
    $subset{vel} = $data{velocity}                if defined $data{velocity};

    return (sprintf "%s\t*                 \t%s", $ts->to_string, JSON()->encode(\%subset));
}

sub convert_new($data_href) {
    my ($lat, $lon) = split(m/,\s*/, ($data_href->{point} =~ s/Â°//gr));
    my $ts = Time::Moment->from_string($data_href->{'time'})->at_utc->with_precision(0);

    my %subset = (_type => 'location', tid => ($ENV{tid} // 'p4'));
    $subset{tst} = $ts->epoch;
    $subset{lat} = 0 + $lat;
    $subset{lon} = 0 + $lon;

    return (sprintf "%s\t*                 \t%s", $ts->to_string, JSON()->encode(\%subset));
}

sub main() {
    my $fh;
    my $current_path = '';

    while (defined(my $line = <<>>)) {
        my $google_data = JSON()->decode($line);
        if (exists $google_data->{latitudeE7} && exists $google_data->{longitudeE7}) {
            ## old timeline format (Google Takeout)
            validate($google_data);

            my $path = save_path($google_data->{timestamp});
            if ($path ne $current_path) {
                close($fh) if $fh;
                open($fh, '>', $path)
                    or die "Unable to open file $path: $!";
                $current_path = $path;
            }

            say {$fh} convert_old($google_data);
        } elsif (exists $google_data->{timelinePath}) {
            ## New timeline format (Settings > Location > Location Services > Timeline > "Export Timeline data" )
            ## in semanticSegments extracted with jq
            for my $it ($google_data->{timelinePath}->@*) {
                my $path = save_path($it->{time});
                if ($path ne $current_path) {
                    close($fh) if $fh;
                    open($fh, '>', $path)
                        or die "Unable to open file $path: $!";
                    $current_path = $path;
                }
                say {$fh} convert_new($it);
            }
        } else {
            next;
        }
    }

    exit 0;
}

exit main();

__END__
