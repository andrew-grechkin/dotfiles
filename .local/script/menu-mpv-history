#!/usr/bin/env perl

use v5.36;
use autodie;
use open ':locale';
use utf8;

# Lua is a piece of shit, honestly, it even doesn't have any utf8 encoding/decoding in it's core library so it writes
# history strings in mpv "as is" in it's encoding, thus any title in history not properly encoded in utf8 (which is not
# a rare case for old video files for example) will warn on non-utf8 character and exit if such warning is fatal.
# Here we need to be ready to read the history file with non-utf8 characters written by Lua and that's why fatal utf8
# warnings are disable.
# Frankly speaking any language is as pathetic as it's core library pathetic is and Lua's core library is not even a joke.

# use warnings     qw(FATAL utf8);

use experimental qw(declared_refs refaliasing signatures);

use constant {
    DIR => "$ENV{XDG_STATE_HOME}/mpv",
    TSV => "$ENV{XDG_STATE_HOME}/mpv/play.history.tsv",
};

sub main {
    my $header;
    my %merge;
    foreach my $path (TSV()) {
        -r $path or next;

        ($header, my \%data) = parse_file($path);
        @merge{keys %data} = values %data;
    }

    my @result = sort {$a->[0] cmp $b->[0]} values %merge;

    open(my $fhw, '>', TSV())
        or die sprintf("unable to open file: %s\n", TSV());
    say {$fhw} "localtime\ttype\ttitle\tmisc\tcommand\tpath";
    say {$fhw} ($_->[2]) foreach @result;
    close($fhw);

    if (-t STDOUT) {
        my $data = `$0`;

        my @cmd = (
            'fzf-execute2',
            sprintf('--bind=alt-r:execute-silent(grep -vF {2} %s | sponge %s)+reload(%s)', TSV(), TSV(), $0),
            qq{--bind=ctrl-r:reload($0)},
            q{--bind=ctrl-u:execute-silent(echo -n {2} | perl -pE 'chomp; s/"(.+?)"/$1/g' | clipcopy)},
            q{--header-lines=1},
        );

        open(my $pipe => '|-', @cmd)
            or die $!;

        print {$pipe} $data;

        close $pipe
            or die $!;
    } else {
        open(my $pipe => '|-', q{tsv-align})
            or die $!;

        say {$pipe} $header;
        say {$pipe} ($_->[1]) foreach reverse @result;

        close $pipe
            or die $!;
    }

    return 0;
}

sub parse_file($path) {
    open(my $fhr, '<', $path)
        or die "unable to open file: $path\n";

    my @result;
    if ($path =~ m/[.]tsv$/) {
        @result = parse_tsv($fhr);
    }
    close($fhr);

    return @result;
}

sub parse_tsv($fh) {
    my %result;

    chomp(my $header = <$fh>);
    while (my $line = <$fh>) {
        chomp($line);
        my ($misc, $cmd, $path);
        my ($localtime, $type, $title, @rest) = split m/\t/, $line;

        unshift @rest, '' if (@rest == 2);
        ($misc, $cmd, $path) = @rest;

        unless ($localtime && $cmd && $path) {
            die "unable to parse line: $line";
        }
        $path =~ s/['"](.+?)['"]/"$1"/g;

        my $key = $type . $path;
        $result{$key} = [
            $localtime,
            sprintf("%s\t%s\t%s\t%s\t%s",     $cmd, $path, $type, $title, $misc),
            sprintf("%s\t%s\t%s\t%s\t%s\t%s", $localtime, $type, $title, $misc, $cmd, $path),
        ];
    }

    return ("cmd\tpath\ttype\ttitle\tmisc", \%result);
}

exit main();

__END__
