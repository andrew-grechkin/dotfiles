#!/usr/bin/env bash

set -Eeuo pipefail

# idea from https://github.com/ThePrimeagen/.dotfiles/blob/master/bin/.local/scripts/tmux-sessionizer

root1="$HOME/git"
root2="/usr/local/git_tree"

selected=$(
	cat                                                                       \
		<(                                                                    \
			fd -HuL -E 'bazel-*' -td -tf '\A.git\z' -d 4 "$root1" 2>/dev/null \
			| perl -plE "s{^$root1/(.*)}{$root1\t\1}x"                        \
		)                                                                     \
		<(                                                                    \
			fd -HuL -E 'bazel-*' -td -tf '\A.git\z' -d 2 "$root2" 2>/dev/null \
			| perl -plE "s{^$root2/(.*)}{$root2\t\1}x"                        \
		)                                                                     \
		| perl -plE "s{\/\.git\/?(?=$|\s)}{}g"                                \
		| sort -u                                                             \
		| fzf
)

if [[ -z $selected ]]; then
	exit 0
fi

IFS='	' read -r -a parts <<< "$selected"

full_path="${parts[0]}/${parts[1]}"
selected_name=$(echo "${parts[1]}" | tr . _)

if [[ -z $TMUX ]] && [[ -z "$(pgrep tmux 2>/dev/null)" ]]; then
	tmux new-session -s "$selected_name" -c "$full_path"
	exit 0
fi

# has-session seems broken because it matches the beginning of the name, so sessions with similar names but different
# suffixes are false positively detected as existing
# if ! tmux has-session -t "$selected_name" &>/dev/null; then
if ! tmux list-sessions | grep -P "${selected_name}:" &>/dev/null; then
	tmux new-session -ds "$selected_name" -c "$full_path"
fi

tmux switch-client -t "$selected_name"
