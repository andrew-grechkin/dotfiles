#!/usr/bin/env bash

# => header (source able) ----------------------------------------------------------------------------------------- {{{1

function tsp-items-get() {
	local convert
	convert=$(cat <<-'EO_CONVERT'
		use constant {JSON_ONE_LINE => JSON::PP->new->canonical->utf8(0)->pretty(0)->indent(0)};
		if ($F[1] eq 'finished') {
			$id = int(shift @F);
			$state = shift @F;
			$out = shift @F;
			$err = shift @F;
			push @r, {id => $id, state => $err eq '0' ? $state : 'failed', output => $out, error => $err, times => shift @F, command => join(' ', @F)};
		} else {
			push @r, {id => int(shift @F), state => shift @F, output => shift @F, error => '', times => '', command => join(' ', @F)};
		}
		END {
			shift @r;
			say JSON_ONE_LINE()->encode(\@r)
		}
		EO_CONVERT
	)
	tsp -l | perl -CALS -MJSON::PP -lanE "$convert"
}

# => body (executable) -------------------------------------------------------------------------------------------- {{{1

if [[ "$0" == "${BASH_SOURCE[0]:-}" ]]; then # hide all executions under condition to make file source able
	set -Eeuo pipefail

	args=$(getopt --name="$0" --options 'j' --longoptions 'json' -- "$@")
	eval set -- "$args"

	while ((1)); do
		case "$1" in
			-j | --json) json='1'; shift ;;
			--) shift; break ;;
		esac
	done

	if [[ -n "${json:-}" ]]; then
		tsp-items-get
	elif [[ -t 1 ]]; then
		export FZF_RELOAD_CMD="$0"
		source "$HOME/.local/lib/shell/fzf.bash"

		fzf_args=(
			--bind="alt-C:execute-silent(fzf-run-reload <<< \"echo Cleaning up finished tasks...; $0 -j | jq -r '.[].output' | xargs -r rm -f; tsp -C\")"
			--bind="alt-R:execute-silent(fzf-run-reload --  echo 'Killing task' {1}; tsp -k {1})"
			--bind="alt-i:execute( { tsp -i {1}; echo; echo Output:; cat \$(tsp -o {1}); } | \$PAGER)"
			--header="A-C:clean A-R:kill A-i:inspect $DEFAULT_FZF_KEYS"
			--preview="tsp -i {1}; echo; echo Output:; cat \$(tsp -o {1})"
			--preview-window="right:50%:border-left:wrap:nohidden,<55(hidden)"
			--prompt="tsp > "
			--tiebreak="begin,chunk"
			--with-nth="3.."
		)
		"$0" | fzf-exec "${fzf_args[@]}"
	else
		source "$HOME/.local/lib/shell/data-processing.bash"

		jq_fields=(
			"_id;\(.id)"
			"_url;\(.id)"
			"id;\(.id)"
			"state;\(.state | if . == \"failed\" then \"${FG[red]}\(.)\" end)${FX[reset]}"
			"err;\(.error | if . != \"0\"      then \"${FG[red]}\(.)\" end)${FX[reset]}"
			"command;\(.command)"
			"times;\(.times);gray"
			"output;\(.output);silver"
		)

		"$0" -j | json-array-to-tsv 'sort_by(.id) | reverse' "${jq_fields[@]}"
	fi
fi
