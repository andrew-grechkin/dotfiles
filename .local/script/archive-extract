#!/usr/bin/env perl

use v5.36;
use autodie;
use open ':locale';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

use Getopt::Long qw(:config auto_version bundling no_ignore_case);
use Pod::Usage   qw(pod2usage);

use Path::Tiny qw(path);

use AnyArchive::Extract qw();

our $VERSION = 1.000;

my %options = ('HERE' => 0);

sub main() {
    GetOptions(
        'directory|d=s' => \$options{'DIRECTORY'},
        'help|h'        => sub {pod2usage(-verbose => 99, exitval => 0)},
        'here'          => \$options{'HERE'},
    ) or die "Unable to process command line options\n";

    my $error_code = 0;
    foreach my $archive (map {path($_)} @ARGV) {
        $archive->exists
            or die "Archive doesn't exist: $archive\n";

        try {
            my $basename    = AnyArchive::Extract::basename($archive);
            my $destination = _get_destination($archive, $basename)
                or next;

            AnyArchive::Extract::execute($archive, $destination);
        } catch ($error) {
            warn $error;
            $error_code = 1;
        };
    }

    return $error_code;
}

sub _get_destination ($file, $basename) {
    return Path::Tiny->cwd if $options{'HERE'};

    my $destination
        = $options{'DIRECTORY'}
        ? path($options{'DIRECTORY'})
        : Path::Tiny->cwd->child($basename);

    if ($destination->exists) {
        warn "Skipping file '$file'. Destination path $destination already exists\n";
        return;
    } else {
        $destination->mkpath;
    }

    return $destination;
}

exit main();

__END__
