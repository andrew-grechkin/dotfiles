#!/usr/bin/env perl

# ABSTRACT: Simple HTTP server to echo every incoming request to STDOUT as a JSON

use v5.36;
use autodie;
use open ':locale';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

# this is accessed at compile time so it must be in begin block
BEGIN {
    ## no critic [Variables::RequireLocalizedPunctuationVars]
    # $ENV{MOJO_EVENTEMITTER_DEBUG} = 1;
    $ENV{MOJO_LOG_LEVEL} = 'error';
}

use English      qw(-no_match_vars);
use Getopt::Long qw(:config auto_version bundling no_ignore_case);

use Mojo::JSON           qw(encode_json);
use Mojo::Server::Daemon qw();

use constant { 'DEFAULT_PORT' => 3456 };

# => -------------------------------------------------------------------------------------------------------------- {{{1

local $OUTPUT_AUTOFLUSH = 1;

my $repeat = $ENV{'HTTP_ECHO_REPEAT'} // 0;
my $port   = $ENV{'HTTP_ECHO_PORT'}   // DEFAULT_PORT();

GetOptions(
    'port|p=s' => \$port,      # listening port
    'repeat|r' => \$repeat,    # continue listening after first request processed
) or die "Unable to process command line options\n";

use constant { 'STATUS_OK' => 200, 'STATUS_REDIRECT' => 301, 'STATUS_SERVER_ERROR' => 500 };

# => -------------------------------------------------------------------------------------------------------------- {{{1

sub main() {
    my $daemon = Mojo::Server::Daemon->new( listen => ["http://*:$port"], silent => 1 );

    $daemon->unsubscribe('request')->on(
        request => sub ( $daemon, $tx ) {
            $tx->on(
                finish => sub ($tx) {
                    unless ($repeat) {
                        $daemon->stop;
                        $daemon->ioloop->stop;
                    }
                },
            );

            my $req = $tx->req;

            my %data = (
                headers => $req->headers->to_hash,
                method  => $req->method,
                path    => $req->url->path->to_string,
                query   => $req->url->query->to_hash,
            );

            my $req_body = $req->json || $req->body_params->to_hash;
            if ( $req->method ne 'GET' && $req_body && ( ref $req_body eq 'HASH' && $req_body->%* ) ) {
                $data{body} = $req_body;
            }

            if ( $data{path} =~ m{/redirect (?:/ (30[1-8]) )? $}x ) {
                my $status = int( $1 // $data{query}{status} // STATUS_REDIRECT() );
                my $url    = $data{query}{url} // '/redirected';

                $data{status} = sprintf '[%d] %s', $status, $tx->res->default_message($status);
                say {*STDOUT} encode_json(
                    {
                        location => $url,
                        %data,
                    },
                );
                $tx->res->code($status);
                $tx->res->headers->location($url);
            } else {
                if ( $data{path} =~ m{/error (?:/ ([45]\d{2}) )? $}x ) {
                    $data{status}         = int( $1 // STATUS_SERVER_ERROR() );
                    $data{status_message} = $tx->res->default_message( $data{status} );
                }

                # Response
                my $body = encode_json( \%data );
                say {*STDOUT} $body;

                $tx->res->code( $data{status} // STATUS_OK() );
                $tx->res->headers->content_type('application/json');
                $tx->res->body($body);
            }

            # Resume transaction
            $tx->resume;
        },
    );

    say {*STDERR} "Web application available at http://127.0.0.1:$port";
    $daemon->run;

    return 0;
}

exit main();

__END__
