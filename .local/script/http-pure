#!/usr/bin/env -S perl -n

use v5.38;
use autodie;
use open ':locale';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin class declared_refs defer for_list refaliasing try);

class HttpParser {
    use experimental qw(builtin declared_refs defer for_list refaliasing try);

    use English qw(-no_match_vars);

    use Log::Any          qw($log);
    use Log::Any::Adapter qw(Stderr), ('log_level' => 'debug');

    use Mojo::URL       qw();
    use Mojo::UserAgent qw();

    use Data::Printer;

    use constant {
        'UA'  => Mojo::UserAgent->new->max_redirects(2)->request_timeout(10)->tap(sub {$_->proxy->detect}),
        'URL' => Mojo::URL->new('https://'),
    };

    my $regex_verb = qr{
        \A
        (?<verb> GET|POST)
        \s+
        (?<url> \S+)
        \z
    }x;

    field $regex_header = qr{
        \A
        (?<key> [^:]+)
        :\s+
        (?<value> .+)
        \z
    }x;
    field $regex_option = qr{
        \A
        --(?<option>.+)
        \z
    }x;

    field $verb;
    field $url;
    field %headers;
    field $content;
    field @options;

    method add_verb ($line) {
        $log->tracef('checking verb: %s', $line);

        if ($line =~ $regex_verb) {
            $verb = uc $LAST_PAREN_MATCH{verb};
            $url  = Mojo::URL->new($LAST_PAREN_MATCH{url});

            $log->infof('  found verb: %s', $verb);
            $log->infof('  found url: %s',  $url);

            return builtin::true;
        }

        return;
    }

    method add_header ($line) {
        $log->tracef('checking header: %s', $line);

        if ($line =~ $regex_header) {
            my $key = lc $LAST_PAREN_MATCH{key};
            my $val = $LAST_PAREN_MATCH{value};
            $headers{$key} = $val;

            $log->infof('  found key:   %s', $key);
            $log->infof('  found value: %s', $val);

            return builtin::true;
        }

        return;
    }

    method add_option ($line) {
        $log->tracef('checking option: %s', $line);

        if ($line =~ $regex_option) {
            my $option = $LAST_PAREN_MATCH{option};
            push @options, $option;

            $log->infof('  found option: %s', $option);

            return builtin::true;
        }

        return;
    }

    field @parsers = (\&add_verb, \&add_header, \&add_option);

    ADJUST {
        $log->debug('Preparing new HTTP request:');
        return $self;
    }

    method parse_line ($line) {
        chomp($line);

        return if $line =~ m/^#/;

        $log->debugf("parsing line: '%s'", $line);
        my $found = builtin::false;
        foreach my $parser (@parsers) {
            if ($parser->($self, $line)) {
                $found = builtin::true;
                last;
            }
        }

        $log->warnf("unknown line: '%s'", $line) unless $found;

        return;
    }

    method process_headers() {
    }

    method execute() {
        if (exists $headers{host}) {
            $url = $url->base(Mojo::URL->new(delete $headers{host}))->to_abs;
        }

        p $url;
        p %headers;
        p @options;
        p $content;

        my $tx = UA()->build_tx($verb => $url => \%headers => $content // ());

        UA()->start_p($tx)->then(sub ($tx) {
            say $tx->req->to_string;
            say $tx->res->to_string;
        })->catch(sub ($err) {
            warn "Connection error: $err";
        })->wait;

        return 0;
    }

    sub check_req_start ($line) {
        return scalar($line =~ $regex_verb);
    }
}

chomp;

state @req_queue;

if (HttpParser::check_req_start($_)) {
    push @req_queue, HttpParser->new;
}

$req_queue[-1]->parse_line($_) if @req_queue;

END {
    exit $req_queue[-1]->execute;
}

__END__
