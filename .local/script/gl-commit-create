#!/usr/bin/env bash

# => header (source able) ----------------------------------------------------------------------------------------- {{{1

source "$HOME/.local/lib/shell/gitlab.bash"

# => body (executable) -------------------------------------------------------------------------------------------- {{{1

set -Eeuo pipefail

if [[ -t 0 ]]; then
	args=$(getopt --name="$0" --options 'h:p:a:b:c:f:m:' --longoptions 'host:,project:,action:,branch:,content:,file:,message:' -- "$@")
	eval set -- "$args"

	action='create'

	while ((1)); do
		case "$1" in
			-h | --host) GL_HOST="$2"; shift 2 ;;
			-p | --project) GL_PROJECT="$2"; shift 2 ;;
			-a | --action) action="$2"; shift 2 ;;
			-b | --branch) GL_BRANCH="$2"; shift 2 ;;
			-c | --content) content="$2"; shift 2 ;;
			-f | --file) file="$2"; shift 2 ;;
			-m | --message) message="$2"; shift 2 ;;
			--) shift; break ;;
		esac
	done

	[[ -z "${message:-}" ]] && { echo "message is required"; exit 1; }
	[[ -z "${file:-}" ]]    && { echo "file is required"; exit 1; }
	[[ -z "${content:-}" ]] && { echo "content is required"; exit 1; }

	gl-redefine-vars

	[[ -z "${GL_BRANCH:-}" ]]  && { echo "branch is required"; exit 1; }

	payload="$(mktemp --tmpdir="${XDG_RUNTIME_DIR:-/tmp}")"
	trap 'rm -f "$payload"' EXIT
	>"$payload" jq -n --arg action "$action" --arg branch "$GL_BRANCH" --rawfile content "$content" --arg file "$file" --arg message "$message" '{
		"branch": $branch,
		"commit_message": $message,
		"actions": [
			{
				"action": $action,
				"file_path": $file,
				"content": $content
			}
		]
	}'

	gl-commit-create "$GL_PROJECT" "$payload"
else
	args=$(getopt --name="$0" --options 'h:p:' --longoptions 'host:,project:' -- "$@")
	eval set -- "$args"

	while ((1)); do
		case "$1" in
			-h | --host) GL_HOST="$2"; shift 2 ;;
			-p | --project) GL_PROJECT="$2"; shift 2 ;;
			--) shift; break ;;
		esac
	done

	gl-redefine-vars

	gl-commit-create "$GL_PROJECT" <(cat)
fi
