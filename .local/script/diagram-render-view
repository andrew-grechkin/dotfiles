#!/usr/bin/env perl

use v5.36;
use autodie;
use open 'IO' => ':raw';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

use Env          qw($PODMAN_USERNS);
use Getopt::Long qw(:config auto_version bundling no_ignore_case);

use Path::Tiny qw(path);

$PODMAN_USERNS = 'keep-id';

my %options = (
    'KEEP'    => 0,
    'VERBOSE' => 0,
);

my @renderers = (
    {
        'execute' => sub ( $workdir, $file_path, $file_name, $file_barename ) {
            chomp( my $uid = `id -u` );
            chomp( my $gid = `id -g` );

            my @cmd = (
                'docker', qw(run --rm), '-v', "$workdir:/data", '-u', "$uid:$gid",
                'docker.io/minlag/mermaid-cli',
                qw(-q -b transparent -i),
                "/data/$file_name", '-o', "/data/${file_name}.svg",
            );
            say "@cmd";
            system(@cmd) == 0
                or die "Unable to run: @cmd\n";

            return $workdir->child("${file_name}.svg");

        },
        'extension' => '.mmd',
        'match'     => qr/([.](?:mmd|mermaid))\z/x,
    },
    {
        'execute' => sub ( $workdir, $file_path, $file_name, $file_barename ) {
            chomp( my $uid = `id -u` );
            chomp( my $gid = `id -g` );

            my @cmd = (
                'docker', qw(run --rm), '-v', "$workdir:/data", '-u', "$uid:$gid", 'ghcr.io/plantuml/plantuml',
                qw(java -jar plantuml.jar -tsvg),
                "/data/${file_name}",
            );
            say "@cmd";
            system(@cmd) == 0
                or die "Unable to run: @cmd\n";

            return $workdir->child("${file_barename}.svg");
        },
        'extension' => '.puml',
        'match'     => qr/([.](?:plantuml|puml|pu))\z/x,
        # https://plantuml.com/
        # https://plantuml.com/command-line
        # https://plantuml.com/svg
    },
);

sub main() {
    GetOptions(
        'keep|k+'    => \$options{'KEEP'},
        'verbose|v+' => \$options{'VERBOSE'},
    ) or die "Unable to process command line options\n";

    die "Provide only one file to process\n" unless @ARGV == 1;

    foreach my $renderer (@renderers) {
        my ($extension) = $ARGV[0] =~ $renderer->{'match'};
        next unless $extension;

        my $file_path     = path( $ARGV[0] );
        my $file_barename = $file_path->basename( $renderer->{'match'} );
        my $file_name     = $file_path->basename( $renderer->{'match'} ) . $renderer->{'extension'};

        my $workdir =
            Path::Tiny->tempdir( 'CLEANUP' => ( $options{'KEEP'} < 2 ), 'TEMPLATE' => 'mmd-render-XXXXX' )->absolute;
        $workdir->chmod('a+rw');

        $file_path->copy( $workdir->child($file_name) );
        my $result = $renderer->{'execute'}->( $workdir, $file_path, $file_name, $file_barename );
        die "No result produced\n" unless $result && $result->is_file;

        if ( $options{'KEEP'} ) {
            $result->copy( $file_path->sibling("${file_name}.svg") );
        }

        system("sxiv -f '$result'") == 0
            or die "Unable to open svg\n";
        return 0;
    }

    die sprintf( "Unrecognized file: %s\n", $ARGV[0] );
}

exit main();

__END__
