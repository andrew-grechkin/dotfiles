#!/usr/bin/env perl

use v5.36;
use autodie;
use open ':locale';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

use Encode       qw(decode);
use English      qw(-no_match_vars);
use Getopt::Long qw(:config auto_version bundling no_ignore_case);
use Pod::Usage   qw(pod2usage);

use Image::ExifTool   qw();
use Log::Any          qw($log);
use Log::Any::Adapter qw(Stderr), (log_level => 'info');
use Path::Tiny        qw(path);
use Time::Moment      qw();
use YAML::XS          qw();

our $VERSION = 1.00;

my %options = (
    'APPLY'         => 0,
    'SKIP_ON_ERROR' => 0,
    'VERBOSE'       => 0,
);

my @tm_parsers = (
    sub ($str) {
        return Time::Moment->from_string($str, 'lenient' => 1);
    },
    sub ($str) {
        return Time::Moment->from_string($str . 'Z', 'lenient' => 1);
    },
    sub ($str) {
        return Time::Moment->from_string($str =~ s{:}{}xgr, 'lenient' => 1);
    },
    sub ($str) {
        $str .= 'Z';
        return Time::Moment->from_string($str =~ s{:}{}xgr, 'lenient' => 1);
    },
);

sub main {
    GetOptions(
        'apply|a'    => \$options{'APPLY'},
        'help|h'     => sub {pod2usage('-verbose' => 99, 'exitval' => 0)},
        'skip|s'     => \$options{'SKIP_ON_ERROR'},
        'verbose|v+' => \$options{'VERBOSE'},
    ) or die "Unable to process command line options\n";

    $log->{'adapter'}{'log_level'} += $options{'VERBOSE'};

    foreach my $path (map {path($_)->absolute} @ARGV) {
        $log->debugf('Processing: %s', $path);

        try {
            my $tm = detect_time($path);
            change_file_mtime($path, $tm);
        } catch ($e) {
            my $message = $log->errorf('Unable to process: %s, %s', $path, $e);
            die "$message\n" unless $options{'SKIP_ON_ERROR'};
        };
    }

    return 0;
}

sub detect_time ($path) {
    if (my $time_from_name = detect_from_name($path)) {
        return $time_from_name;
    }

    my \@exif_times = fetch_exif_times($path);

    my $last_error;
    foreach my $time_str (@exif_times) {
        $log->tracef('trying time: %s', $time_str);

        foreach my $parser (@tm_parsers) {
            try {
                my $tm = $parser->($time_str);
                $log->debugf('Detected "%s" from EXIF: %s', $tm, $time_str);
                return $tm;
            } catch ($e) {
                $last_error = $e;
            }
        }
    }

    if (my $time_from_path = detect_from_path($path)) {
        return $time_from_path;
    }

    die $log->fatalf("Unable to detect EXIF creation time: %s\n", $last_error);
}

## no critic [RegularExpressions::ProhibitComplexRegexes]
sub detect_from_name ($path) {
    state $regex = qr{
        \A
            (?:[[:alnum:]]{3,4})
            _ (?<date>[[:digit:]]{8})
            _ (?<time>[[:digit:]]{6})
            .+
        \z
    }x;

    my $result;

    my $filename = $path->basename;
    foreach my $parser (@tm_parsers) {
        my ($name) = $filename =~ m/(.*)[.]\w+$/x;
        try {
            $log->tracef('Checking filename: %s', $name);
            my $tm = $parser->($name);
            $log->debugf('Detected "%s" from filename: %s', $tm, $name);
            return $tm;
        } catch ($e) {
        };
    }

    if ($filename =~ $regex) {
        my $tm = $tm_parsers[0]->($LAST_PAREN_MATCH{'date'} . 'T' . $LAST_PAREN_MATCH{'time'} . 'Z');
        $log->debugf('Detected "%s" from filename: %s', $tm, $filename);
        return $tm;
    }

    return $result;
}

sub detect_from_path ($path) {
    state $regex = qr{
        \A
            (?<date>[[:digit:]]{4})
        \z
    }x;

    my $result;

    my $path_part = $path->parent->basename;
    if ($path_part =~ $regex) {
        my $tm = $tm_parsers[0]->($LAST_PAREN_MATCH{'date'} . '-01-01T00:00:00Z');
        $log->debugf('Detected "%s" from path: %s', $tm, $path_part);
        return $tm;
    }

    return $result;
}

sub fetch_exif_times ($path) {
    state @keys = (qw(
            GPSDateTime
            DateTimeOriginal
            CreateDate
            SubSecCreateDate
            SubSecDateTimeOriginal
            SubSecModifyDate
            ModifyDate
            GPSDateStamp
        ),
    );

    my $exif_tool = Image::ExifTool->new;
    $exif_tool->Options(Unknown => 1);
    my \%info = $exif_tool->ImageInfo($path, @keys);
    $log->tracef(Encode::decode('UTF-8', YAML::XS::Dump(\%info)));

    my @result = grep defined, @info{@keys};
    return \@result;
}

sub change_file_mtime ($file, $tm) {
    if ($options{'APPLY'}) {
        utime $tm->epoch, $tm->epoch, $file
            or $log->error('Unable to set file time');
    }
    $log->infof('Applied "%s" to: %s', $tm, $file);

    return;
}

exit main();

__END__
