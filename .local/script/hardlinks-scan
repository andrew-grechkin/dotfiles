#!/usr/bin/env perl

use v5.36;
use autodie;
use open ':locale';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

use Encode         qw(decode);
use Getopt::Long   qw(:config auto_version bundling no_ignore_case);
use JSON::PP       qw();
use Module::Loaded qw(is_loaded);
use Pod::Usage     qw(pod2usage);

use Path::Tiny qw(path);

BEGIN {
    eval {require YAML::XS}; ## no critic [ErrorHandling::RequireCheckingReturnValueOfEval]
}

our $VERSION = 1;

my %options = ('JSON' => 0);

sub main() {
    GetOptions(
        'json|j' => \$options{'JSON'},
        'help|h' => sub {pod2usage('-verbose' => 99, 'exitval' => 0)},
    ) or die "Unable to process command line options\n";

    @ARGV
        or push(@ARGV, '.');

    my %files;
    foreach my $folder (@ARGV) {
        path($folder)->visit(
            sub ($path, $) {
                $path->is_file && !-l $path
                    or return;

                my $stat = $path->stat;

                push(
                    $files{sprintf('d(%d)i(%d)n(%d)', $stat->dev, $stat->ino, $stat->nlink)}->@*,
                    decode('UTF-8', $path->stringify, Encode::FB_CROAK),
                ) if $stat->nlink > 1;
            },
            {
                'recurse'         => 1,
                'follow_symlinks' => 1,
            },
        );
    }

    if (!$options{'JSON'} && is_loaded('YAML::XS')) {
        say decode('UTF-8', YAML::XS::Dump(\%files));
    } else {
        say JSON::PP->new->pretty->encode(\%files);
    }

    return 0;
}

exit main();

__END__
