#!/usr/bin/env -S perl -CALDS

use v5.36;
use experimental qw(declared_refs defer refaliasing);

use Mojo::File      qw(path);
use Mojo::UserAgent qw();

our $VERSION = 1;

use constant {
    'UA'  => Mojo::UserAgent->new->max_redirects(2)->request_timeout(10)->tap(sub {$_->proxy->detect}),
    'URL' => Mojo::URL->new('https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/glyphnames.json'),
};
my $desc_file = path("$ENV{XDG_STATE_HOME}/nerd-font.tsv");

sub main() {
    convert_glyphnames() unless (-r $desc_file);

    open(my $fh, '<', $desc_file)
        or die "Can't open $desc_file: $!\n";
    while (defined(my $line = <$fh>)) {
        chomp $line;
        say {*STDOUT} $line
            or exit 0;
    }

    return 0;
}

sub convert_glyphnames() {
    my \%glyphnames = fetch_glyphnames();

    my $metadata = delete $glyphnames{'METADATA'};

    my $file;
    open($file, '>', $desc_file)
        or die "Can't open $desc_file: $!\n";
    defer {close $file};

    say {$file} 'code', "\t", 'type', "\t", 'name', "\t", 'char';
    foreach my $key (sort keys %glyphnames) {
        my ($type, $name) = $key =~ m/\A (.+?) - (.+) \z/xx;
        $name =~ s/_/ /xx;

        my ($char, $code) = $glyphnames{$key}->@{qw(char code)};

        say {$file} $code, "\t", $type, "\t", $name, "\t", $char;
    }

    return;
}

sub fetch_glyphnames() {
    my $response = UA()->get(URL())->result;
    $response->is_success
        or die sptintf("Failed to retrieve '%s': %s", URL(), join(' ', $response->code, $response->message));

    return $response->json
        || die("Failed to decode json: $! $@");
}

exit main();

__END__
