#!/usr/bin/env bash

set -Eeuo pipefail

if [[ -t 1 ]]; then
	[[ -x "$(command -v fzf)" ]] || {
		echo "fzf is not installed. Please install from 'https://github.com/junegunn/fzf#installation'"
		exit 1
	}

	query='?per_page=100'
	since='2 month ago'
	state='opened'
	table='1'
	wip='0'
else
	[[ -x "$(command -v jq)" ]] || {
		echo "jq is not installed. Please install from 'https://jqlang.github.io/jq/download/'"
		exit 1
	}

	query='?per_page=100'
	since='3 month ago'
	state='all'
	table='0'
	wip='0'
fi

args="$(getopt --name="$0" --options 'twa:h:p:s:' --longoptions 'table,wip,author:,host:,project:,since:,state:' -- "$@")"
eval set -- "$args"
args=("$@")

# shellcheck disable=SC2078
while [ : ]; do
	case "$1" in
		-a | --author) query+="&author_username=$2"; shift 2 ;;
		-h | --host) HOST="$2"; shift 2 ;;
		-p | --project) PROJECT="$2"; shift 2 ;;
		--since) since="$2"; shift 2 ;;
		-s | --state) state="$2"; shift 2 ;;
		-t | --table) table='1'; shift ;;
		-w | --wip) wip='1'; shift ;;
		--) shift; break ;;
	esac
done

source "$(dirname "$0")/git-gl-common"

if [[ -t 1 ]]; then
	if [[ -x "$(command -v json-pretty)" ]]; then
		prettify_json=(json-pretty --no-filename --color=always)
	else
		prettify_json=(jq -SC '|' less)
	fi

	if [[ -x "$(command -v delta)" ]]; then
		prettify_diff=('|' delta --paging=always)
	else
		prettify_diff=()
	fi

	fetcher=(
		"$0"
		--since "$since"
		--state "$state"
		--table
		"${args[@]}"
	)

	fzf_cmd=(
		fzf
		--ansi
		--bind="alt-a:execute-silent(set -x; exec &>/tmp/git-approve.log; git-gl-approve -h \"$HOST\" -p \"$PROJECT\" {+1})+reload-sync(${fetcher[*]})"
		--bind="alt-b:execute-silent(python3 -mwebbrowser {7})"
		--bind="alt-p:toggle-preview,ctrl-alt-w:toggle-preview-wrap,ctrl-s:toggle-sort"
		--bind="alt-s:execute(git-gl-mr {1} | ${prettify_json[*]})"
		--bind="alt-r:execute-silent(git-gl-approve -h \"$HOST\" -p \"$PROJECT\" {+1} -u)+reload-sync(${fetcher[*]})"
		--bind="alt-q:execute({ echo \"Approved by:\"; echo; git-gl-approve-list -t -h \"$HOST\" -p \"$PROJECT\" {1}; } | less)"
		--bind="ctrl-m:execute(git-gl-mr-diff {1} ${prettify_diff[*]})"
		--bind="ctrl-r:reload-sync(${fetcher[*]})"
		--bind="ctrl-y:execute-silent(echo -n {} | clipcopy)"
		--bind="esc:cancel"
		--bind="home:top"
		--bind="tab:toggle+down,shift-tab:toggle+up"
		--delimiter=$'\u00a0'
		--header-lines=1
		--header='A-a:approve A-b:browse A-p:preview A-q:approvals A-s:payload A-r:revoke C-r:reload C-y:yank Enter:diff'
		--multi
		# --no-sort
		--preview-window=right:60%:border-left:wrap:hidden
		--preview="git-gl-mr-diff {1} ${prettify_diff[*]:0:2}"
		--reverse
		# --scheme=history
		--scroll-off=4
		--tabstop=4
		--track
	)

	"${fetcher[@]}" | "${fzf_cmd[@]}"
else
	if [[ "$wip" == '0' ]]; then
		query+='&wip=no'
	fi
	if [[ -n "$state" ]]; then
		query+="&state=$state"
	fi
	if [[ -n "${since:-}" ]]; then
		# created_after=$(date --rfc-3339=seconds --date="$(date +%Y-%m-01) -1 month")
		created_after=$(date --rfc-3339=seconds --date="$since")
		query+="&created_after=$(url_encode "$created_after")"
	fi

	# https://docs.gitlab.com/ee/api/merge_requests.html#list-project-merge-requests
	if [[ -x "$(command -v xhs1)" ]]; then
		http_fetch_command=(
			xhs
			"${HOST}/api/v4/projects/$(url_encode "$PROJECT")/merge_requests${query}"
			"${COMMON_XH_OPTIONS[@]}"
		)
	else
		http_fetch_command=(
			curl
			-s
			"https://${HOST}/api/v4/projects/$(url_encode "$PROJECT")/merge_requests${query}"
			-H "accept: application/json"
			-H "private-token: $TOKEN"
		)
	fi

	if [[ "$table" == "1" ]]; then
		"${http_fetch_command[@]}" | {
			jq_fields=(
				"id;$(tput setaf 3)\(.iid)$(tput sgr0)"
				"created;$(tput setaf 2)\(.updated_at[0:10])$(tput sgr0)"
				# 'wip;\(if .work_in_progress then 1 else 0 end)'
				# 'project_id;\(.project_id)'
				"author;$(tput setaf 12)\(.author.name)$(tput sgr0)"
				"name;$(tput setaf 13)\(.author.username)$(tput sgr0)"
				"project;$(tput setaf 6)$PROJECT$(tput sgr0)"
				'title;\(.title)'
				"url;$(tput setaf 14)\(.web_url)$(tput sgr0)"
			)

			col_names=()
			jq_filter=()
			for field in "${jq_fields[@]}"; do
				IFS=";" read -r -a keyval <<< "$field"
				col_names+=("${keyval[0]}")
				jq_filter+=("${keyval[1]}")
			done

			{
				echo -e "$(join "${col_names[@]}")"
				jq -Sr "sort_by(.iid) | reverse | .[] | \"$(join "${jq_filter[@]}")\""
			} | column -ts '	' -o $'\u00a0'
		}
	else
		"${http_fetch_command[@]}"
	fi
fi
