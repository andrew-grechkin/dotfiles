#!/usr/bin/env bash

set -Eeuo pipefail

[[ -x "$(command -v jq)" ]] || {
	echo "jq is not installed. Please install from 'https://jqlang.github.io/jq/download/'"
	exit 1
}

eval set -- "$(getopt --options 'ta:h:p:' --longoptions 'table,author:,host:,project:' -- "$@")"

if [[ -t 1 ]]; then
	table='1'
fi

# shellcheck disable=SC2078
while [ : ]; do
	case "$1" in
		-a | --author)
			state="${state:-author_username=$2}"
			shift 2
			;;
		-h | --host)
			HOST="$2"
			shift 2
			;;
		-p | --project)
			PROJECT="$2"
			shift 2
			;;
		-t | --table)
			table='1'
			shift
			;;
		--) shift;
			break
			;;
	esac
done

source "$(dirname "$0")/git-gl-common"

created_after=$(date --rfc-3339=seconds --date="$(date +%Y-%m-01) -1 month")

state="${state:-state=opened&wip=no&created_after=${created_after}}"

# https://docs.gitlab.com/ee/api/merge_requests.html#list-project-merge-requests
if [[ -x "$(command -v xhs)" ]]; then
	http_fetch_command=(
		xhs
		"${HOST}/api/v4/projects/$(url_encode "$PROJECT")/merge_requests?per_page=100&${state}"
		"${COMMON_XH_OPTIONS[@]}"
	)
else
	http_fetch_command=(
		curl
		-s
		"https://${HOST}/api/v4/projects/$(url_encode "$PROJECT")/merge_requests?per_page=100&created_after=$(url_encode "$created_after")&${state}"
		-H "accept: application/json"
		-H "private-token: $TOKEN"
	)
fi

if [[ "${table:-0}" == "1" ]]; then
	"${http_fetch_command[@]}" | {
		jq_fields=(
			"id;$(tput setaf 3)\(.iid)$(tput sgr0)"
			"created;$(tput setaf 2)\(.updated_at[0:10])$(tput sgr0)"
			# 'wip;\(if .work_in_progress then 1 else 0 end)'
			# 'project_id;\(.project_id)'
			"author;$(tput setaf 12)\(.author.name)$(tput sgr0)"
			"name;$(tput setaf 13)\(.author.username)$(tput sgr0)"
			"project;$(tput setaf 6)$PROJECT$(tput sgr0)"
			'title;\(.title)'
			"url;$(tput setaf 14)\(.web_url)$(tput sgr0)"
		)

		col_names=()
		jq_filter=()
		for field in "${jq_fields[@]}"; do
			IFS=";" read -r -a keyval <<< "$field"
			col_names+=("${keyval[0]}")
			jq_filter+=("${keyval[1]}")
		done

		{
			echo -e "$(join "${col_names[@]}")"
			jq -Sr "sort_by(.updated_at) | .[] | \"$(join "${jq_filter[@]}")\""
		} | column -ts '	' -o $'\u00a0'
	}
else
	"${http_fetch_command[@]}"
fi
