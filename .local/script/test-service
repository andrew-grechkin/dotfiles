#!/usr/bin/env perl

use v5.36;
use autodie;
use open 'IO' => ':raw';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

use Carp         qw(croak);
use Getopt::Long qw(:config auto_version bundling no_ignore_case);

use Log::Any          qw($log);
use Log::Any::Adapter qw(Stderr), ('log_level' => 'notice');
use Mojo::IOLoop      qw();
use YAML::XS          qw();

use Data::Printer;

use MyHash::Util qw(merge);

my %options = ( ## no tidy
    'VERBOSE' => 0,
);

# ---
# test-name-1:
#   common:
#     type: Mojo
#     verb: get
#     headers: {}
#     output: yaml
#     query: format=j1
#     url: https://wttr.in
#   sections:
#     prod:
#       host: wttr.in
#   specifications:
#     Local: {}
#     Paris:
#       path: Paris

sub main() {
    GetOptions(
        'help|h'     => sub {pod2usage('-verbose' => 99, 'exitval' => 0)},
        'verbose|v+' => \$options{'VERBOSE'},
    ) or die "Unable to process command line options\n";

    $_->{'adapter'}{'log_level'} += $options{'VERBOSE'}
        foreach $log, Log::Any->get_logger('category' => 'TestService::Action');

    my \%config = _parse_config(_read_config(@ARGV));

    while (my ($key, $test) = each %config) {
        ref $test eq 'HASH' && $test->{'common'}
            or die sprintf "Invalid test config: %s\n", np $test;

        my \%common         = $test->{'common'};
        my \%sections       = $test->{'sections'}       // {'default' => {}};
        my \%specifications = $test->{'specifications'} // {'default' => {}};

        my %tests_by_type;
        while (my ($section_name, $section_config) = each %sections) {
            my \%section_config = merge(\%common, $section_config);

            while (my ($specification_name, $specification_config) = each %specifications) {
                my \%full_config = merge(\%section_config, $specification_config);

                my $type = $full_config{'type'}
                    or die sprintf "Invalid test config, no type: %s\n", np %full_config;

                $tests_by_type{$type}{'plugin'} //= _load_plugin($type);
                push($tests_by_type{$type}{'names'}->@*, join('-', $key, $section_name, $specification_name));
                push($tests_by_type{$type}{'tests'}->@*, \%full_config);
            }
        }

        foreach my $type (keys %tests_by_type) {
            my $plugin = $tests_by_type{$type}{'plugin'};
            my \@results = $plugin->execute($tests_by_type{$type}{'names'}, $tests_by_type{$type}{'tests'});
        }
    }

    return 0;
}

sub _load_plugin ($type) {
    my $package = "TestService::Action::$type";

    eval "require $package" ## no critic [BuiltinFunctions::ProhibitStringyEval]
        or croak "Unable to load package: $package $@";

    return $package->can('new')->($package);
}

sub _read_config (@argv) {
    my $text;

    if (@argv) {
        my $file = pop @argv;
        -e -r $file
            or die "File does not exist: $file\n";
        $log->infof('loading config file: %s', $file);
        $text = do {local $/ = undef; open my $fh, '<', $file; <$fh>}; ## no critic [InputOutput::RequireBriefOpen]
    } else {
        $text = do {local $/ = undef; <STDIN>};
    }

    return $text;
}

sub _parse_config ($text) {
    my @sections = YAML::XS::Load($text);
    return $sections[0];
}

exit main();

__END__
