#!/usr/bin/env perl

use v5.36;
use autodie;
use open IO => ':raw';
use utf8;
use warnings     qw(FATAL utf8);
use experimental qw(builtin declared_refs defer for_list refaliasing try);

use Mojo::File qw(path);

sub main() {
    @ARGV == 2
        or die "Please provide 2 directories\n";

    my @dirs = map {path($_)} @ARGV;

    my @absent = grep {!$_->stat} @dirs
        and die "Directory absent\n";

    my (\@left_only, \@right_only, \@diff, \@failures) = _compare(@dirs, map {$_->list_tree({'hidden' => 1})} @dirs);

    my $result = 0;
    if (@left_only) {
        say 'Only in: ', $dirs[0]->to_string;
        say "\t ",       $_ foreach sort @left_only;
        say '';
    }

    if (@right_only) {
        say 'Only in: ', $dirs[1]->to_string;
        say "\t ",       $_ foreach sort @right_only;
        say '';
    }

    if (@diff) {
        say 'Differ: ';
        say "\t ", $_ foreach sort @diff;
    }

    if (@failures) {
        say 'Failures: ';
        say "\t ", $_ foreach sort @failures;
        return 2;
    }

    return $result;
}

sub _compare ($lpath, $rpath, $ltree, $rtree) {
    my %lhs = $ltree
        ->grep(sub {!m{[.]git[/]|[@]eaDir[/]}x})
        ->sort
        ->map(sub {$_->to_rel($lpath)->to_string, $_->lstat // 0})->@*;
    my %rhs = $rtree
        ->grep(sub {!m{[.]git[/]|[@]eaDir[/]}x})
        ->sort
        ->map(sub {$_->to_rel($rpath)->to_string, $_->lstat // 0})->@*;

    my (%left_only, %right_only, %diff, %failures);
    foreach my $path (keys %lhs) {
        if (exists $rhs{$path}) {
            if (!$lhs{$path} || !$rhs{$path}) {
                warn "Unable to stat: $path\n";
                $failures{$path} = undef;
            } elsif ($lhs{$path}->size != $rhs{$path}->size) {
                $diff{$lpath->child($path)->to_string} = delete $rhs{$path};
            }
            delete $rhs{$path};
        } else {
            $left_only{$lpath->child($path)->to_string} = $lhs{$path};
        }
    }
    foreach my $path (keys %rhs) {
        $right_only{$rpath->child($path)->to_string} = $rhs{$path};
    }

    return ([keys %left_only], [keys %right_only], [keys %diff], [keys %failures]);
}

exit main();

__END__
