#!/usr/bin/env bash

set -Eeuo pipefail

# ðŸ„¯ 2024 Andrew Grechkin
# LICENSE:
#     GPL-2.0-or-later

# ABSTRACT:
#     jq REPL. Quickly build filtering request with preview

# SYNOPSIS:
#     curl -Ls 'https://jsonplaceholder.typicode.com/users' | jq-repl -q 'map({position: .address.geo, email})'

# eval and getopt must be separated to ensure fatal error trowed on invalid parameter passed
args="$(getopt --name="$0" --options='q:Rrt' --longoptions='query:,raw-input,raw-output,type' -- "$@")"
eval set -- "$args"

query='.'
rawi=''
rawo=''
type="'empty'"

# shellcheck disable=SC2078
while [ : ]; do
	case "$1" in
		-q | --query) query="$2"; shift 2 ;;
		-R | --raw-input) rawi="Rn"; shift ;;
		-r | --raw-output) rawo="r"; shift ;;
		-t | --type) type="{q}' | type'"; shift ;;
		--) shift; break ;;
	esac
done

if [[ -z "${1:-}" ]] || [[ $1 == "-" ]]; then
	input="$(mktemp --tmpdir="${XDG_RUNTIME_DIR-:/tmp}")"
	trap 'rm -f "$input"' EXIT
	cat /dev/stdin > "$input"
else
	input="$1"
fi

if [[ -x "$(command -v json-pretty)" ]]; then
	prettify=(json-pretty --no-filename --color=always)
else
	prettify=(jq -SC)
fi

fzf_cmd=(
	fzf
	--ansi
	--bind="alt-i:execute(${prettify[*]} '$input' | less)"
	--bind="alt-p:unbind(alt-p)"
	--bind="ctrl-c:become(echo -n {q} | clipcopy; true)"
	--bind="ctrl-d:half-page-down,ctrl-u:half-page-up"
	--bind="ctrl-j:preview-down,ctrl-k:preview-up"
	--bind="ctrl-m:execute(jq -c$rawi$rawo {q} '$input' | ${prettify[*]} | less)"
	--bind="ctrl-x:become(q={q}; echo -n jq -c$rawo \"\${q@Q}\" | tee >(clipcopy) >/dev/stderr; echo >/dev/stderr; jq -c$rawo {q} '$input')"
	--bind="ctrl-y:execute-silent(echo -n {q} | clipcopy)"
	--bind="end:preview-bottom"
	--bind="esc:execute-silent(echo -n {q} | clipcopy)+change-query($query)"
	--bind="home:preview-top"
	--bind="page-down:preview-page-down,page-up:preview-page-up"
	--disabled
	--header='A-i:input C-c:exit C-j:dn C-k:up C-x:dump C-y:yank Enter:view Esc:reset pgup,pgdn,home,end'
	--preview-window='up:95%:border-bottom:wrap:nohidden'
	--preview="{ jq -c$rawi $type '$input' && jq -c$rawi {q} '$input' || jq -c$rawi . '$input'; } | ${prettify[*]}"
	--print-query
	--scroll-off=4
	--tabstop=4
	--query="$query"
)

# enforcing BASH is necessary here because of bash specific escaping of quotes used in some operations
SHELL="$(command -v bash)"
export SHELL

# exec would prevent trap from execution
"${prettify[@]}" "$input" | "${fzf_cmd[@]}"
