#!/usr/bin/env perl

use v5.36;

use List::Util qw(uniq);

@ARGV
    or push @ARGV, 'HEAD';

my $cmd = 'git rev-parse --verify ' . $ARGV[0];

chomp(my @remotes        = `git remote`);
chomp(my $current_remote = `git current-remote`);
chomp(my $ref            = qx{$cmd});

for my $remote (uniq($current_remote, sort @remotes)) {
    chomp(my $git_remote_url = `git remote get-url $remote`);

    my $final_url;
    if ($git_remote_url =~ m/^git@/ && $git_remote_url =~ m/gitlab([.]boo king)?[.]com/x) {
        my $gitlab_remote_url = $git_remote_url =~ s/^git@ | [.]git$//grx;
        $gitlab_remote_url =~ s{:}{/}gx;
        if (@ARGV > 1) {
            $final_url = sprintf 'https://%s/-/blob/%s/%s', $gitlab_remote_url, $ref, $ARGV[-1];
        } else {
            $final_url = sprintf 'https://%s/-/commits/%s', $gitlab_remote_url, $ref;
        }
    } elsif ($git_remote_url =~ m/^git@/ && $git_remote_url =~ m/github[.]com/x) {
        my $github_remote_url = $git_remote_url =~ s/^git@ | [.]git$//grx;
        $github_remote_url =~ s{:}{/}gx;
        if (@ARGV > 1) {
            $final_url = sprintf 'https://%s/blob/%s/%s', $github_remote_url, $ref, $ARGV[-1];
        } else {
            $final_url = sprintf 'https://%s/commit/%s', $github_remote_url, $ref;
        }
    }

    if ($final_url) {
        say $final_url;
        exit 0;
    }
}

exit 1;

__END__
