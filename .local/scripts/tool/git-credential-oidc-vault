#!/usr/bin/env bash

# ABSTRACT: simple git credentials helper for vault oidc

set -Eeuo pipefail

# only get command is supported
[[ "${1:-}" == 'get' ]] || exit

# expose input key=value pars as variables
while read -r line; do
    declare -- "$line"
done

[[ "${protocol:-}" != 'https' ]] && exit

function fatal() {
    echo "fatal:" "$@" >&2; exit 1
}

payload="$(jq -cn '{redirect_uri: "http://localhost:8250/oidc/callback"}')"
url="$(curl --fail-with-body -sXPOST "https://${host?host must be provided}/v1/auth/oidc/oidc/auth_url" -H "content-type:application/json" --data "$payload" | jq -r '.data.auth_url')"

echo "> $(basename "$0") requesting refresh token from:" >&2
echo "  $url" >&2

# this is the most portable way of starting browser I know of
git web--browse "$url" &>/dev/null || fatal 'unable to start request in browser to fetch refresh token'

port='8250'
{ enable accept && accept -b '127.0.0.1' -t 60 "$port"; } || fatal "unable to bind socket on port: $port"

if [[ -n "${ACCEPT_FD:-}" ]]; then
    IFS=$'\r\n' read -r -u "$ACCEPT_FD" res

    while IFS=$'\r\n' read -r -u "$ACCEPT_FD" header; do
        if [[ -z "$header" ]]; then
            response='HTTP/1.1 200 OK\n
            <html><head></head><body onload="waitFiveSec()">
            <h1>Request is successfuly processed, this page will close automatically in 5 sec</h1>
            <script>function waitFiveSec() { setTimeout(function() { window.close() }, 5000) }</script>
            </body></html>'
            echo -e "$response" >&"$ACCEPT_FD"
            break
        fi
    done

    exec {ACCEPT_FD}>&- # close connection

    [[ -z "${res:-}" ]] && fatal 'unable to fetch response from OICD provider'

    query="$(grep -Pom1 '\/oidc\/callback\?\K\S+' <<< "$res")"
    if creds="$(curl --fail-with-body -s "https://$host/v1/auth/oidc/oidc/callback?$query")"; then
        password="$(jq -r '.auth.client_token // empty' <<< "$creds")"
        username="$(jq -r '.request_id // empty' <<< "$creds")"
        if [[ -n "$username" && -n "$password" ]]; then
            echo "protocol=$protocol"
            echo "host=$host"
            echo "username=$username"
            echo "password=$password"
            lease_duration="$(jq -r '.auth.lease_duration // empty' <<< "$creds")"
            [[ -n "$lease_duration" ]] && echo "password_expiry_utc=$(date -d "+$lease_duration seconds" +%s)"
        fi
    else
        echo "request to fetch access token failed with response:" >&2
        jq <<< "$creds" >&2
    fi
fi
