#!/usr/bin/env bash

# => header (source able) ----------------------------------------------------------------------------------------- {{{1

function pacman-items-get() {
    local convert
    convert=$(cat << 'EO_CONVERT'
use constant {JSON_ONE_LINE => Cpanel::JSON::XS->new->canonical->utf8(0)->unblessed_bool([1])->pretty(0)->indent(0)};
INIT {%e = map {chomp; (split)} <<>>}
push @r, {repo => $F[0], name => $F[1], version => $F[2], installed => !!$F[3], explicit => !!(delete $e{$F[1]})};
END {
	push @r, {repo => 'aur', name => $_, version => $e{$_}, installed => true, explicit => true} foreach keys %e;
	say JSON_ONE_LINE()->encode(\@r)
}
EO_CONVERT
    )

    pacman -Sl | perl -CALS -MCpanel::JSON::XS -lanE "$convert" <(pacman -Qe)
}

# => body (executable) -------------------------------------------------------------------------------------------- {{{1

if [[ "$0" == "${BASH_SOURCE[0]:-}" ]]; then # hide all executions under condition to make file source able
    set -Eeuo pipefail

    args=$(getopt --name="$0" --options 'j' --longoptions 'json' -- "$@")
    eval set -- "$args"

    while ((1)); do
        case "$1" in
            -j | --json) json='1'; shift ;;
            --) shift; break ;;
        esac
    done

    if [[ -n "${json:-}" ]]; then
        pacman-items-get
    elif [[ -t 1 ]]; then
        export FZF_RELOAD_CMD="$0"
        fzf_args=(
            --bind="alt-A:execute(fzf-run-reload -ft 1 -- sudo pacman -S {+1})"
            --bind="alt-C:execute(fzf-run-reload -f    -- arch-remove-orphans)"
            --bind="alt-D:execute(fzf-run-reload -ft 1 -- sudo pacman -D --asdeps {+1})"
            --bind="alt-E:execute(fzf-run-reload -ft 1 -- sudo pacman -D --asexplicit {+1})"
            --bind="alt-R:execute(fzf-run-reload -ft 1 -- sudo pacman -Rcs {+1})"
            --bind="alt-U:execute(echo 'trizen -Syu --noconfirm --noedit --needed && sudo pacman -Fy' | fzf-run-reload -ft 1)"
            --footer="A-A:install A-C:clean A-D:asdep A-E:asexp A-R:remove A-U:upgrade"
            --preview="if [[ {5} == 'installed' ]]; then cat <(pacman -Qi {1}) <(pacman -Ql {1} | awk '{print \$2}'); else cat <(pacman -Si {1}) <(pacman -Fl {1} | awk '{print \$2}'); fi"
            --preview-window="right:50%:border-left:wrap:nohidden,<55(hidden)"
            --prompt="pacman > "
            --with-nth="3.."
        )
        "$0" | fzf-table-multi "${fzf_args[@]}"
    else
        jq_fields=(
            "_id;\(.name)"
            '_url;\("https://aur.archlinux.org/packages/\(.name)")'
            "name;\(.name)"
            "type;\(if .explicit then \"explicit\" else \"\" end);yellow"
            "status;\(if .installed then \"installed\" else \"\" end);purple"
            "repo;\(.repo);gray"
        )

        "$0" -j | json2table 'sort_by((.explicit | not), (.installed | not), .name)' "${jq_fields[@]}"
    fi
fi
