#!/usr/bin/env bash
# shellcheck disable=SC2016,SC2154

set -Eeuo pipefail

[[ -x "$(command -v argc)" ]] || {
    echo "'argc' helper command is required, install from https://github.com/sigoden/argc" >&2
    exit 2
}

# @describe Docker images TUI

# @meta version 1.0.0
# @meta combine-shorts
# @meta require-tools docker,fzf-table-multi,json2table

# @flag   -j --json  Output result as json
# @flag   -t --tui   Force fzf even if stdout is not a tty

eval "$(argc --argc-eval "$0" "$@")"

# => -------------------------------------------------------------------------------------------------------------- {{{1

fetcher=("$0")

if [[ -n "${argc_json:-}" ]]; then
    docker images -a --format "{{json . }}" "${argc__positionals[@]}" 2>/dev/null \
        | jq -nRcS '[inputs | fromjson | with_entries(.key |= ascii_downcase) | select(.repository != "<none>" or .dangling == true)]'
elif [[ -t 1 || -n "${argc_tui:-}" ]]; then
    export FZF_RELOAD_CMD="${fetcher[*]@Q}"
    fzf_args=(
        --bind="alt-E:execute(docker run -it --rm -h \$(basename {2}) --entrypoint sh {1})"
        --bind="alt-H:execute(jfrog tags {2})"
        --bind="alt-G:execute-silent(echo 'read -r -p image\ to\ pull:\  image; docker pull \$image' | fzf-run-reload -e DOCKER_CONFIG,DOCKER_HOST -ft 1)"
        --bind="alt-I:execute(docker inspect {1} | jq-repl)"
        --bind="alt-R:execute-silent(fzf-run-reload -e DOCKER_CONFIG,DOCKER_HOST -t 1 -- docker rmi -f {+1})"
        --bind="alt-b:execute(docker run -it --rm -h \$(basename {2}) --entrypoint bash {1})"
        --bind="alt-c:execute-silent(fzf-run-reload -e DOCKER_CONFIG,DOCKER_HOST -t 1 -- docker-clean)"
        --bind="alt-g:execute-silent(fzf-run-reload -e DOCKER_CONFIG,DOCKER_HOST -- docker pull {+-1})"
        --bind="alt-s:execute-silent(fzf-run-reload -e DOCKER_CONFIG,DOCKER_HOST -t 1 -- docker push --sign-by='$GNUPGKEY' {+-1})"
        --bind="alt-i:execute(docker inspect {1} | json-pretty -f {-1})"
        --bind="alt-t:become(jfrog tui=force tags {2})"
        --bind="ctrl-b:execute(docker run -it --rm -h \$(basename {2}) --entrypoint sh {1})"
        --bind="ctrl-e:execute(docker run -it --rm -h \$(basename {2}) {1})"
        --bind="ctrl-m:become(cat {+f-1})"
        --bind="ctrl-y:execute-silent(echo -n {+-1} | clipcopy)"
        --footer="A-R:remove A-H:history A-I:jq-repl A-b:bash A-c:clear A-g:pull A-i:inspect A-s:push C-b:sh C-e:run C-p:pull"
        --preview="docker inspect {1} | json-pretty -C -f {-1}"
        --prompt="docker images > "
        --with-nth="..-2"
    )
    "${fetcher[@]}" | fzf-table-multi "${fzf_args[@]}"
else
    jq_fields=(
        'id;\(.id | .[0:10]);olive'
        'repository;\(.repository);teal'
        'tag;\(.tag)'
        'use;\(.containers);silver'
        'size;\(.size | if type == "string" then . else "\((. / (1024 * 1024)) | round) ${FG[gray]}MiB" end);gray'
        'created;\(if .createdat then .createdat else .created | todateiso8601 end);green'
        'path;\(.repository):\(.tag)'
    )
    "${fetcher[@]}" -j | json2table 'sort_by(.repository == "<none>", .repository, .tag)' "${jq_fields[@]}"
fi
