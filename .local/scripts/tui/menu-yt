#!/usr/bin/env bash
# shellcheck disable=SC2016,SC2154

set -Eeuo pipefail

[[ -x "$(command -v argc)" ]] || {
    echo "'argc' helper is required. Please install from https://github.com/sigoden/argc" >&2
    exit 2
}

# @describe Overview video on Youtube

# @meta version 1.0.0
# @meta combine-shorts
# @meta require-tools colored-md,fzf-table,gum,jq,memoize,yt-dlp

# @arg    command+  URL to youtube video
# @flag -j --json   Output JSON

eval "$(argc --argc-eval "$0" "$@")"

# => -------------------------------------------------------------------------------------------------------------- {{{1

if [[ -n "${argc_json:-}" ]]; then
    memoize -- yt-dlp --dump-json "${argc__positionals[0]}" | jq '.formats'
elif [[ -t 1 ]]; then
    export FZF_RELOAD_CMD="${0@Q} ${*@Q}"
    fzf_args=(
        --bind='alt-A:execute-silent(tsp audio-download -- -P "$HOME/music" {2})'
        --bind='alt-V:execute-silent(tsp video-download -- -P "$HOME/videos" {2})'
        --bind='alt-g:execute-silent([[ -n {5} ]] && tsp yt-dlp -f {1} {2})'
        --bind='ctrl-m:execute-silent(f={1}; exec-detached mpv --quiet --ytdl-raw-options="format=\"$f\",sub-langs=\"en,nl,ru,fr,de,it,pt\"" -- {2})'
        --footer='alt-A:audio alt-V:video alt-g:download | A-b:browse A-p:preview'
        --preview-window='right:65%:border-left:wrap:hidden,<55(hidden)'
        --preview="$FZF_RELOAD_CMD -j | jq --arg id {1} '.[] | select(.format_id == \$id)' | json2yaml | colored-yaml"
        --prompt="youtube ${argc__positionals[0]} > "
        --with-nth='3..'
    )
    eval "$FZF_RELOAD_CMD" | fzf-table "${fzf_args[@]}"
else
    jq_fields=(
        '_id;\(.format_id)'
        "_url;${argc__positionals[0]}"
        'id;\(.format_id);green'
        'ext;\(.ext)'
        'type;\(if (.vcodec and .vcodec != "none") then "video" elif (.acodec and .acodec != "none") then "audio" else "" end)'
        'resolution;\(if .resolution == "audio only" then "${FG[gray]}" else "" end + .resolution + "${FX[reset]}");olive'
        'fps;\(.fps | if . then round else "" end)'
        'ch;\(.audio_channels | if . then . else "" end)'
        'size;\((.filesize // .filesize_approx) | if . then (. / 1024 / 1024 | round | tostring) + "MiB" else "" end);teal'
        'tbr;\(.tbr | if . then (round | tostring) + "k" else "" end)'
        'proto;\(.protocol);silver'
        'vcodec;\(if (.vcodec and .vcodec != "none") then .vcodec elif (.acodec and .acodec != "none") then "${FG[gray]}audio only${FX[reset]}" else "" end);magenta'
        'vbr;\(.vbr | if (. and . > 0) then (round | tostring) + "k" else "" end)'
        'acodec;\(if (.acodec and .acodec != "none") then .acodec elif (.vcodec and .vcodec != "none") then "${FG[gray]}video only${FX[reset]}" else "" end);cyan'
        'abr;\(.abr | if (. and . > 0) then (round | tostring) + "k" else "" end)'
        'asr;\(.asr | if (. and . > 0) then (. / 1000 | round | tostring) + "k" else "" end)'
        'more;\([.language,.format_note,.container] | map(select(.)) | join(", "));silver'
    )
    "$0" "$@" -j | json2table '.' "${jq_fields[@]}"
fi
