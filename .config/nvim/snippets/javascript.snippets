snippet marker
	// => ------------------------------------------------------------------------------------------------------------- {{{1
	$0

# => Helpers ------------------------------------------------------------------------------------------------------ {{{1

snippet jsonp "Helper: JSON decode"
	JSON.parse(${0:jstr});

snippet jsons "Helper: JSON encode"
	JSON.stringify(${0:object});

snippet timeout "Helper: schedule execution"
	setTimeout(function () {${0}}${2}, ${1:10});

snippet ed "Helper: export default"
	export default ${0}

snippet keys "Helper: keys of an object"
	Object.values(${0})

snippet vals "Helper: values of an object"
	Object.values(${0})

# => Imports ------------------------------------------------------------------------------------------------------ {{{1

snippet imp "Import: member from module"
	import {${1:name}} from '${2:module}';

snippet impd "Import: default from module"
	import ${1:name} from '${2:$1}';

snippet impas "Import: * from module"
	import * as ${1:name} from '${2:$1}';

snippet useformat "Import: format"
	import {format} from 'node:util';

# => JSDoc -------------------------------------------------------------------------------------------------------- {{{1

snippet @block "JSDoc: block"
	/**
	 * ${0:description}
	 */

snippet @par "JSDoc: @param"
	@param {${1:type}} ${2:name}

snippet @pard "JSDoc: @param with description"
	@param {${1:type}} ${2:name} - ${0:description}

snippet @ret "JSDoc: @returns"
	@returns {${1:type}}

snippet @retd "JSDoc: @returns with description"
	@returns {${1:type}} ${0:description}

snippet @type "JSDoc: @typedef"
	@typedef {import("@mojojs/core").$1} ${1:type}

# => Functions ---------------------------------------------------------------------------------------------------- {{{1

snippet fun "Function: named (sync)"
	function ${1:name}(${2}) {
		${0:${VISUAL}}
	}

snippet funa "Function: named (async)"
	async function ${1:name}(${2}) {
		${0:${VISUAL}}
	}

snippet :fun "Function: named (sync) attribute of an object"
	${1:name}: function (${2:attribute}) {
		${0:${VISUAL}}
	},

snippet :funa "Function: named (async) attribute of an object"
	${1:name}: async function (${2:attribute}) {
		${0:${VISUAL}}
	},


snippet fun*
	function* ${1:name}(${2}) {
		${0:${VISUAL}}
	}

snippet cfun
	const ${1:name} = (${2}) => {
		${0:${VISUAL}}
	}

snippet cfuna
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}

snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		let instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}

# => Conditionals ------------------------------------------------------------------------------------------------- {{{1

snippet ter "Conditional: ternary"
	${1:condition} ? ${2:expression} : ${3:expression};

snippet if "Conditional: if"
	if (${1}) {
		${0:${VISUAL}}
	}

snippet ife "Conditional: if..else"
	if (${1}) {
		${2:${VISUAL}}
	} else {
		${0}
	}

snippet switch "Conditional: switch"
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}

snippet case "Conditional: case"
	case '${1:case}':
		${0:${VISUAL}}
		break;

# => Loops -------------------------------------------------------------------------------------------------------- {{{1

snippet fin "Loop: for property names in an object"
	for (const ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}

snippet fof "Loop: for iterator"
	for (const ${1:prop} of ${2:object}) {
		${0:$1}
	}

snippet forc "Loop: for C-style"
	for (let ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; ++$1) {
		${0:${VISUAL}}
	}

snippet while "Loop: while"
	while (${1}) {
		${2:${VISUAL}}
	}
	${0}

snippet do "Loop: do"
	do {
		${0:${VISUAL}}
	} while ($1);

# => Error checking ----------------------------------------------------------------------------------------------- {{{1

snippet try "Error checking: try"
	try {
		${0:${VISUAL}}
	} catch (${2:err}) {
		${3:...}
	}

snippet tryf "Error checking: try finally"
	try {
		${1:${VISUAL}}
	} catch (${2:err}) {
		${3:...}
	} finally {
		${4:...}
	}
	${0}

snippet thr "Error checking: throw an error"
	throw new Error('${1:error message}')

# => Console ------------------------------------------------------------------------------------------------------ {{{1

snippet ca "Console: assert"
	console.assert(${1:expression}, ${0:obj});

snippet cd "Console: debug"
	console.debug(${0});

snippet ce "Console: error"
	console.error(${0});

snippet ci "Console: info"
	console.info(${0});

snippet cl "Console: log"
	console.log(${0});

snippet clj "Console: log JSON encoded"
	console.log(JSON.stringify(${0}, null, 2));

snippet ct "Console: trace"
	console.trace(${0:label});

snippet cw "Console: warn"
	console.warn(${0});

snippet ctime "Console: stopwatch"
	console.time("${1:label}");
	${0:${VISUAL}}
	console.timeEnd("$1");

snippet ctimestamp "Console: timestamp"
	console.timeStamp("${1:label}");

snippet cclear "Console: clear"
	console.clear();

snippet cdir "Console: dir"
	console.dir(${0:obj});

snippet cdirx "Console: dirxml"
	console.dirxml(${1:object});

snippet cgroup "Console: group"
	console.group("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();

snippet cgroupc "Console: group collapsed"
	console.groupCollapsed("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();

snippet cprof "Console: profile"
	console.profile("${1:label}");
	${0:${VISUAL}}
	console.profileEnd();

snippet ctable "Console: table"
	console.table(${1:"${2:value}"});

# => Classes ------------------------------------------------------------------------------------------------------ {{{1

snippet cla "Class: base"
	class ${1} {
		${0:${VISUAL}}
	}

snippet clac "Class: base with constructor"
	class ${1} {
		constructor(${2}) {
			${0:${VISUAL}}
		}
	}

snippet clax "Class: derived"
	class ${1} extends ${2} {
		${0:${VISUAL}}
	}

snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3}) {
		${0:${VISUAL}}
	};

snippet has
	hasOwnProperty(${0})

snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}

snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);

snippet prop
	Object.defineProperty(
		${1:object},
		'${2:property}',
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);

snippet get
	getElementsBy${1:TagName}('${0}')

snippet gett
	getElementBy${1:Id}('${0}')

snippet by.
	${1:document}.getElementsByClassName('${0:class}')

snippet by#
	${1:document}.getElementById('${0:element ID}')

snippet qs
	${1:document}.querySelector('${0:CSS selector}')

snippet qsa
	${1:document}.querySelectorAll('${0:CSS selector}')

snippet sym
	const ${1} = Symbol('${0}');
