" vim: filetype=vifm
" man: https://vifm.info/manual.shtml

" => Generic settings --------------------------------------------------------------------------------------------- {{{1

" Command used to edit files in various contexts. The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

set vicmd=vi
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

set iooptions=fastfilecloning
set dirsize=nitems
set mouse='a'
set slowfs+=/media/nfs

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.

set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory. If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set notrash

" This is how many directories to store in the directory history.

set history=100

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

" set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.

set vimhelp

" If you would like to run an executable file when you press return on the file name set this.

set norunexec

" Selected color scheme

colorscheme grand
source $XDG_CONFIG_HOME/vifm/dircolors

" Format for displaying time in file list. For example: TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%F\ %T\ %Z

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files). In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" Set custom status line look

set statusline=" %A %d %u:%g%=%T %E %N %t%="

" set millerview

"set slowfs+=/media

set sizefmt=units:iec,precision:2,nospace

" => Commands ----------------------------------------------------------------------------------------------------- {{{1
" man: https://vifm.info/manual.shtml#Command%20macros
" help: vifm-macros

command! reload  :write | restart
command! tail    tail -f %c:p
command! clip    clipcopy %c:p %i &
command! ghist   git fh -- %c:p %n || true
command! hdlinks sudo hardlinks-for %f:p | $PAGER

" not clear is how to escape or quote possible new lines in files
command! flat    :!fd -H0t f %a | perl -plE 'INIT { $/ = "\0"}; s/\R/\\n/g' | sort %%U
command! flat!   :!fd -H0t d %a | perl -plE 'INIT { $/ = "\0"}; s/\R/\\n/g' | sort %%U

" create
command! take    :mkdir %a | cd %a
command! ln      ln %f:p %D
command! cp      tsp cp -av --sparse=auto --reflink=auto -- %f:p %D/ %i &
command! cpl     tsp cp -av --link                       -- %f:p %D/ %i &

" execute
command! run    !! ./%c
command! make   !!make %a

" info
command! df     df -h %m
command! mime   xdg-mime query filetype %f %m

" compare
command! diff   vimdiff   %c:p %C
command! ddiff  diff-dirs %c:p %C %m

" search
command! vgrep  vim "+grep %a"
command! hlinks hlinks %c %u
" command! hlinks sudo btrfs inspect-internal inode-resolve "$(inode %c)" "$(findmnt -n --raw --output=target -T %d)" %u

" pack
command! g      tsp archive-create --type="tgz" %f   %i &
command! gz     tsp gzip -v                     %c:p %i &
command! p      tsp archive-create              %f   %i &
command! z      tsp 7z a %c.7z                  %f   %i &

" repack
command! rep    tsp archive-convert        %c:p %i &

" unpack
command! unp    tsp archive-extract --here %c:p %i &

" textify
command! armor  tsp gpg --enarmor          %c:p %i &
command! base   base64 -w 120 %c:p | tee >(>%c.base64) | clipcopy %i &

" checksum
command! md     find . -maxdepth 1 -type f -print0 | sort -z | grep -Pvz '\dsum$' | xargs -0r md5sum  -b > .md5sum
command! sum    find . -maxdepth 1 -type f -print0 | sort -z | grep -Pvz '\dsum$' | xargs -0r sha1sum -b > .sha1sum

" gpg
command! decrypt tsp gpg-decrypt %f %i &
command! encrypt tsp gpg-encrypt %f %i &
command! sign    tsp gpg-sign    %f %i &

" processing
command! hardlinker tsp hardlinker -ar %f %i &

" => File associations -------------------------------------------------------------------------------------------- {{{1

" The file type is for the default programs to be used with a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored. To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE program.

" => File associations: ebooks ------------------------------------------------------------------------------------ {{{1

filextype <application/vnd.ms-htmlhelp,application/rtf,text/rtf>,
	\{*.chm,*.rtf}
	\ {Open with xdg-open}
	\ xdg-open %c:p %i &,
filextype <application/epub+zip,application/x-zip-compressed-fb2,application/x-fictionbook*>,
	\{*.epub,*.fb2,*.fb2.zip,*.fbz,*.mobi,*.tcr}
	\ {Open with xdg-open}
	\ xdg-open %c:p %i &,
	\ FBReader %c:p %i &,
	\ foliate  %c:p %i &,
	\ calibre  %c:p %i &,
	\ okular   %c:p %i &,
	\ cr3      %c:p %i &,

filextype <application/x-fictionbook+xml>,
	\{*.fb2,*.xml,*.gpx,*.xsd,*.kdenlive}
	\ {Open with Kate}
	\ kate          %c:p %i &,
	\ {Reformat xml}
	\ tsp reformat -a %c:p %i &,
	\ {Reformat hard xml}
	\ tsp reformat2-fb2 %c:p %i &,

" => File associations: Djvu, Pdf --------------------------------------------------------------------------------- {{{1
" cat helps to properly show djvu over nfs volumes

filextype <image/vnd.djvu*,application/pdf>,
	\{*.djvu,*.pdf}
	\ {View in zathura}
	\ zathura - < %c:p %i &,
	\ {Open with xdg-open}
	\ xdg-open %c:p %i &,
filextype <application/pdf>,{*.pdf}
	\ {Open with xpdf}
	\ xpdf %c:p %i &,
fileviewer <application/pdf>,{*.pdf}
	\ pdftotext -nopgbrk %c:p -,
fileviewer <application/epub*,application/x-mobipocket-ebook>,{*.epub,*.mobi}
	\ mutool draw -F text %c:p,

filetype <text/markdown>,{*.md,*.mkd,*.Rmd,*.mdwiki}
	\ {View in glow}
	\ glow -p %c:p,
filextype <text/markdown>,{*.md,*.mkd,*.Rmd,*.mdwiki}
	\ {Render to pdf and view}
	\ tsp md-render-view %c:p %i &,

filextype {*.mmd,*.mermaid,*.plantuml,*.puml,*.pu}
	\ {Render to svg}
	\ tsp diagram-render-view -k %c:p %i &,

" => File associations: PostScript -------------------------------------------------------------------------------- {{{1

filextype {*.ps,*.eps,*.ps.gz}
	\ {View in zathura}
	\ zathura - < %c:p %i &,
	\ {View in gv}
	\ gv %c:p %i &,

" => File associations: Video ------------------------------------------------------------------------------------- {{{1

filextype <video/*>
	\ {Video play using mpv}
	\ mpv %c:p %i &,
filetype <video/*>
	\ {Video play using mpv True color terminal}
	\ mpv %c:p --really-quiet -vo tct 2>/dev/null,
filextype <video/*>
	\ {Video play using ffplay}
	\ ffplay -fs -autoexit %c:p %i &,
	\ {Video play using mplayer}
	\ mplayer %c:p %i &,
filextype <video/*>{*.avi,*.mkv,*.webm}
	\ {Video convert to mp4}
	\ tsp -L video-convert 2mp4 %f:p %i &,

" => File associations: Audio ------------------------------------------------------------------------------------- {{{1

filetype <audio/*,video/*,application/x-cue>,{*.cue}
	\ {Audio play using mpv in background}
	\ exec-detached mpv --quiet --no-osc --term-osd=force --no-audio-display --vid=no -- %c:p,
	\ {Audio play using mpv}
	\ mpv --no-osc --term-osd=force --no-audio-display --vid=no -- %c:p %s,
	\ {Audio play using ffplay}
	\ ffplay -nodisp -autoexit %c:p %i &,
filetype <audio/*>
	\ {Audio play using MPlayer}
	\ mplayer %c:p %i &,

filetype <audio/x-wav,audio/vnd.wave>,{*.wav}
	\ {Audio encode to FLAC}
	\ tsp flac -8 %c:p %i &,
	\ {Audio encode to mp3}
	\ tsp lame -b 128 -m j -h -V 1 -B 256 -F %c:p %c:r.mp3 %i &,
filetype !{*.mp3}<audio/*>
	\ {Audio transcode to mp3 with ffmpeg}
	\ for f in %f; do ffmpeg -i "$f" "${f%%.*}".mp3; done
filetype !<audio/flac><audio/*>
	\ {Audio transcode to FLAC with ffmpeg}
	\ for f in %f; do ffmpeg -i "$f" "${f%%.*}".flac; done
filetype <audio/x-ape>,{*.ape}
	\ {Audio decode to wav}
	\ tsp mac %c:p %c:r.wav -d %i &,
filetype <audio/flac>,{*.flac}
	\ {Audio decode to wav}
	\ tsp flac -d %c:p %i &,
filetype <audio/x-wavpack>,{*.wv}
	\ {Audio decode to wav}
	\ tsp wvunpack %c:p %i &,

filextype <audio/midi>,{*.kar,*.mid,*.midi}
	\ timidity -ig -- %c:p %i &,

" => File associations: HTML -------------------------------------------------------------------------------------- {{{1

filextype <text/html>,{*.html,*.htm}
	\ {Open with default browser}
	\ xdg-open %c:p %i &,
	\ exo-open --launch WebBrowser %c:p %i &,
filetype <text/html>,{*.html,*.htm}
	\ links %c:p,
	\ lynx %c:p,
fileviewer <text/html>,{*.html,*.htm}
	\ html2text2 %c:p

filextype <application/x-mimearchive>,{*.mhtml,*.mht}
	\ {Open with default browser}
	\ python3 -mwebbrowser %c:p %i &,
filetype <application/x-mimearchive>,{*.mhtml,*.mht}
	\ {Extract}
	\ mhtml-parse %c:p,
fileviewer <application/x-mimearchive>,{*.mhtml,*.mht}
	\ mhtml-parse -l %c:p

" => File associations: Images ------------------------------------------------------------------------------------ {{{1

filextype !<image/vnd.djvu*><image/*>
	\ {View in sxiv}
	\ sxiv     %f %i &,
	\ {Open with xdg-open}
	\ xdg-open %c:p %i &,
	\ {View in vimiv}
	\ vimiv    %c:p %i &,
	\ {View in pqiv}
	\ pqiv -i  %c:p %c:h %i &,
	\ {View in gpicview}
	\ gpicview %c:p %i &,
fileviewer !<image/vnd.djvu*><image/*>
	\ chafa --clear -c 240 --view-size %pwx%ph -f symbols --polite on %c:p,
	\ viu -t -w %pw -h %ph %c:p,
	\ mediainfo %c:p,
	\ identify -verbose %c:p,

filetype <image/jpeg>
	\ {Exif}
	\ exiftool %c:p | $PAGER,
	\ {Metadata}
	\ identify -verbose %c:p | $PAGER,

" => File associations: sqlite ------------------------------------------------------------------------------------ {{{1

filetype <application/vnd.sqlite3>{*.sqlar,.*.sqlar}
	\ {Extract (foreground) sqlar}
	\ sqlite3 %c:p -Ax &,
fileviewer <application/vnd.sqlite3>{*.sqlar,.*.sqlar}
	\ sqlite3 %c:p -Atv,

filetype <application/vnd.sqlite3>
	\ {View}
	\ sqlite-utils rows %c:p %c:r --nl | json2tsv | tsv-show | less --header=1,
	\ {Browse}
	\ datasette %c:p -o,
	\ {Dump}
	\ sqlite-utils rows %c:p %c:r --nl > %c:r.jsonl %i,
	\ {Repl}
	\ dbui-add-connection %c:r sqlite:%c:p; nvim -c 'DBUIToggle' -c '/%c:r' -c 'execute "normal \<CR>"' -c '/Tables' -c 'execute "normal \<CR>"',
fileviewer <application/vnd.sqlite3>
	\ sqlite-utils tables %c:p --schema --table; sqlite-utils views %c:p --schema --table; echo; sqlite-utils indexes %c:p --table; echo; sqlite-utils analyze-tables %c:p

" => File associations: misc -------------------------------------------------------------------------------------- {{{1

fileviewer {*-cert.pub}
	\ ssh-keygen -Lf %c:p,

filetype {*.oci.image,*.Dockerfile,Dockerfile}
	\ {Build OCI image}
	\ oci-build %c:p,

filetype {*.svct}
	\ {Execute service-test}
	\ test-service -vv %c:p,

filetype {*.spec}
	\ {Edit}
	\ vi %c:p,
	\ {Build for centos 9-stream}
	\ make -f ~/git/public/andrew-grechkin/centos-rpmbuild-docker/Makefile build9 %s,

fileviewer {*.rpm}
	\ rpm -qi %c:p

filetype {CMakeLists.txt}
	\ {Build}
	\ build-cmake %d:p,

filetype <application/x-ndjson>,{*.jsonl}
	\ {View}
	\ json2tsv %c:p | tsv-show --paging=always,
	\ {Convert -> sqlite}
	\ sqlite-utils insert --nl %c:r.db %c:r %c:p,
	\ {Compact json}
	\ jq -c < %c:p | sponge %c:p,
fileviewer <application/x-ndjson>,{*.jsonl}
	\ head -30 %c:p | json2tsv,

filetype <application/json>
	\ {View}
	\ jq -S --indent 2 < %c:p | bat -l JSON --paging=always,
	\ {Repl jq}
	\ jq-repl %c:p,
	\ {Reformat json}
	\ reformat -a %c:p,
	\ {Compact json}
	\ jq -c < %c:p | sponge %c:p,
	\ {Convert json -> yaml}
	\ json2yaml %c:p > %c:r.yaml,

filetype <application/yaml>
	\ {View}
	\ yaml-sanitize %c:p | bat -l yaml --paging=always,
	\ {Repl jq}
	\ yaml2json %c:p | jq-repl,
	\ {Sanitize yaml}
	\ yaml-sanitize -i %c:p,
	\ {Convert yaml -> json}
	\ yaml2json %c:p > %c:r.json,

filetype <text/tab-separated-values>
	\ {View}
	\ tsv-show %c:p | less --header=1,
	\ {Edit}
	\ vi -c "set filetype=csv" %c:p,
	\ {Repl jq}
	\ tsv2json %c:p | jq-repl,
	\ {Dump}
	\ tsv2jsonl %c:p > %c:r.jsonl %i,
	\ {Convert -> sqlite}
	\ tsv2jsonl %c:p | sqlite-utils insert --nl %c:r.db %c:r -,
" sqlite-utils is not good at importing tsv, can loose quotes for example

filetype <text/plain>/[.]md5sum$/
	\ {Check MD5 hash sum}
	\ md5sum -c %c:p %m,

filetype <text/plain>/[.]sha1sum$/
	\ {Check SHA1 hash sum}
	\ sha1sum -c %c:p %m,

filetype <text/plain>/[.]sha256sum$/
	\ {Check SHA256 hash sum}
	\ sha256sum -c %c:p %m,

filetype <text/plain>/[.]sha512sum$/
	\ {Check SHA512 hash sum}
	\ sha512sum -c %c:p %m,

fileviewer {*.pem,*.crt}
	\ openssl x509 -inform PEM -text -in %c:p

fileviewer {*.key}
	\ openssl rsa -check -text -noout -in %c:p

fileviewer {*.csr,*.req}
	\ openssl req -verify -text -noout -in %c:p

filetype {*.key}
	\ {Convert to p12}
	\ certtool --to-p12 --empty-password --load-privkey %c:p --outfile %c:r.p12,

fileviewer {*.key}
	\ openssl x509 -inform PEM -in %c:p -text

filetype {*.p12}
	\ {Convert to PEM}
	\ openssl pkcs12 -in %c:p -out %c:r.pem -nodes,
	\ {Import to GPG}
	\ gpgsm --import %c:p,

filetype {*.torrent}
	\ ktorrent %f:p &,
fileviewer {*.torrent}
	\ dump_torrent -v %c:p,

fileviewer !<inode/directory>{*.gpg.pub}
	\ gpg --import-options show-only --import %c:p,

filetype <application/pgp-encrypted>
	\ {GPG decrypt}
	\ tsp gpg-decrypt %f:p %i &,
fileviewer <application/pgp-encrypted>
	\ gpg --decrypt %c:p,

filetype <application/pgp-signature>
	\ {GPG signature verify}
	\ !!gpg --verify %c:p %m,
fileviewer <application/pgp-signature>
	\ gpg --verify %c:p,

filetype !<inode/directory>{*.base64}
	\ {Decode base64}
	\ base64 -id %c:p > %c:r %i &,
fileviewer !<inode/directory>{*.base64}
	\ base64 -id %c:p,

filetype !<inode/directory>{*.base64c}
	\ {Decode base64 commented}
	\ sed -e 's/^#//' %c:p | base64 -id > %c:r %i &,
fileviewer !<inode/directory>{*.base64c}
	\ sed -e 's/^#//' %c:p | base64 -id,

filetype {*.shx}
	\ {Decode}
	\ sed -e '1,,/^### Base64 BEGIN/d' %c:p | sed -e '/^### Base64 END/,,$d' | sed -e 's/^#//g' | base64 -id > %c:r.tgz,

filetype <text/plain>{*.txt}
	\ {View in less}
	\ less %c:p,
	\ {Recode from cp866}
	\ text-recode cp866 %c:p,
	\ {Recode from cp1251}
	\ text-recode cp1251 %c:p,
	\ {Recode from koi8}
	\ text-recode koi8 %c:p,

" Qt projects
filextype {*.pro}
	\ qtcreator %f:p %i &,

filetype {cpanfile}
	\ {Install Perl modules}
	\ cpanm -nq --installdeps %d,
	\ {Install Perl modules (all)}
	\ cpanm -nv --installdeps %d --with-develop --with-all-features,

filetype {*.http}
	\ {Request with http-pure}
	\ http-pure %c:p,

" => File associations: office files ------------------------------------------------------------------------------ {{{1

filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx}
	\ libreoffice %f:p %i &,
fileviewer {*.doc}
	\ catdoc %c:p,
fileviewer {*.docx}
	\ docx2txt.pl %c:p -,

filextype {*.ttf}
	\ {Open with fontforge}
	\ fontforge %c:p %i &,

" => File associations: iso --------------------------------------------------------------------------------------- {{{1

filetype <application/vnd.efi.iso,application/x-iso9660-image>
	\ {Mount with fuseiso}
	\ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,
	\ {Run with qemu UEFI}
	\ setsid -f iso-run %c:p %i,
	\ {Run with qemu BIOS}
	\ setsid -f iso-run -b %c:p %i,
	\ {Run with qemu UEFI + USB}
	\ setsid -f iso-run-usb-stick %c:p %i,

" => File associations: qemu -------------------------------------------------------------------------------------- {{{1

filetype <application/x-qemu-disk>
	\ {Run with qemu}
	\ setsid -f qcow-run %c:p %i,
	\ {Mount qcow2}
	\ setsid -f qcow-mount %c:p %i,
filetype *.raw
	\ {Run with qemu}
	\ setsid -f qcow-run %c %i,

" => File associations: archives ---------------------------------------------------------------------------------- {{{1

" figure these out
" 	*.war,*.ear,*.oxt,*.apkg,*.lha,*.ar,*.mtree,*.xar,*.eu4

" ArchiveMount
filetype <application/x-tar,application/x-*compressed-tar,application/vnd.efi.img>,
	\<application/x-cpio*,application/x-rpm>
	\ {Archive mount with archivemount}
	\ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer <application/x-tar,application/x-*compressed-tar,application/vnd.efi.img>
	\ tar tavf %c:p,

" fuse3-p7zip
filetype <application/x-tar,application/x-*compressed-tar,application/vnd.efi.img>,
	\<application/x-cpio*,application/x-rpm>,
	\<application/epub+zip,application/vnd.rar,application/x-7z-compressed,application/java-archive,application/zip>,
	\<application/x-zip-compressed-fb2>,
	\<application/vnd.debian.binary-package>
	\ {Archive mount with fuse3-p7zip}
	\ FUSE_MOUNT|fuse3-p7zip %SOURCE_FILE %DESTINATION_DIR,
	\ {Archive extract to subdir...}
	\ tsp archive-extract %f %i &,
	\ {Archive extract here...}
	\ tsp archive-extract --here %f %i &,
	\ {Archive convert to tar.zstd...}
	\ tsp archive-convert %f %i &,
fileviewer <application/x-tar,application/x-*compressed-tar,application/vnd.efi.img>,
	\<application/x-cpio*,application/x-rpm>,
	\<application/epub+zip,application/vnd.rar,application/x-7z-compressed,application/java-archive,application/zip>,
	\<application/x-zip-compressed-fb2>,
	\<application/vnd.debian.binary-package>
	\ 7z l %c:p,

filetype <application/x-tar>
	\ {Compress zstd}
	\ tsp zstd --rm %c:p %i &,
	\ {Compress bzip2}
	\ tsp bzip2 -v %c:p %i &,
	\ {Compress gzip}
	\ tsp gzip -v %c:p %i &,
	\ {Compress lz4}
	\ tsp lz4 --rm %c:p %i &,
	\ {Compress lzma}
	\ tsp lzma %c:p %i &,
	\ {Compress xz}
	\ tsp xz -v %c:p %i &,
filetype /[.](tar[.])?br$/
	\ {Decompress}
	\ tsp brotli -d --rm %c:p %i &,
filetype <application/x-bzip2*>
	\ {Decompress}
	\ tsp bzip2 -dv %c:p %i &,
filetype <application/lz4,application/x-lz4-compressed-tar>
	\ {Inspect}
	\ lz4 --list %c %m,
	\ {Decompress}
	\ tsp lz4 -d --rm %c:p %i &,
filetype <application/lzma,application/x-lzma-compressed-tar>
	\ {Decompress}
	\ tsp lzma -d %c:p %i &,
filetype <application/xz,application/x-xz-compressed-tar>
	\ {Inspect}
	\ xz -l %c %m,
	\ {Decompress}
	\ tsp xz -dv %c:p %i &,
filetype <application/zstd,application/x-zstd-compressed-tar>
	\ {Decompress}
	\ tsp zstd -d --rm %c:p %i &,

filetype <application/gzip,application/x-compressed-tar>
	\ {Inspect}
	\ gzip -l %c %m,
	\ {Decompress}
	\ tsp gunzip -v %c:p %i &,
fileviewer <application/gzip>
	\ gzip -l %c,

" => File associations: S3 mount ---------------------------------------------------------------------------------- {{{1

filetype {*.s3fs}
	\ {Mount with s3fs}
	\ FUSE_MOUNT2|s3fs %PARAM %DESTINATION_DIR %FOREGROUND,

" => File associations: ssh mount --------------------------------------------------------------------------------- {{{1

filetype {*.ssh}
	\ {Mount with sshfs}
	\ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" => File associations: ftp mount --------------------------------------------------------------------------------- {{{1

filetype {*.ftp}
	\ {Mount with curlftpfs}
	\ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" => File associations: encrypted fs mount ------------------------------------------------------------------------ {{{1

filetype {cryfs.config}
	\ {Mount with cryfs}
	\ FUSE_MOUNT2|cryfs -c %SOURCE_FILE %d %DESTINATION_DIR %FOREGROUND,

filetype {*.encfs}
	\ {Mount with encfs}
	\ FUSE_MOUNT2|encfs %PARAM %DESTINATION_DIR %FOREGROUND,

" => File associations: all files --------------------------------------------------------------------------------- {{{1

filetype !<inode/directory>
	\ {Edit in vim}
	\ vi %c:p %n,
	\ {View in less}
	\ less %c:p %n,
	\ {Show file}
	\ show-file %c:p | $PAGER,

" => File associations: ansible role ------------------------------------------------------------------------------ {{{1

filetype {main.yaml}
	\ {Execute ansible role}
	\ ansible-role  %d:h -K --ask-vault-pass -i localhost,, ,

" => File associations: vpn --------------------------------------------------------------------------------------- {{{1

filetype {home-*.conf}
	\ {Import wireguard config}
	\ nmcli connection import type wireguard file %c:p

" => File associations: gpg --------------------------------------------------------------------------------------- {{{1

filetype {*.pub}
	\ {Import public key}
	\ gpg --import %c:p,
fileviewer {*.pub}
	\ gpg-show %c:p

" => File associations: all dirs ---------------------------------------------------------------------------------- {{{1

filetype <inode/directory>
	\ {Show dir}
	\ show-dir %c:p | $PAGER,
	\ {Play dir recursively background}
	\ exec-detached mpv --quiet --no-osc --term-osd=force --no-audio-display --vid=no -- %c:p,
	\ {Play dir recursively foreground}
	\ mpv --no-osc --term-osd=force --no-audio-display --vid=no -- %c:p %s,
	\ {Compress (foreground) as tar.zstd}
	\ tar -c %f | pv | zstd > %c.tzst,
	\ {Compress (foreground) as tar}
	\ tar -c %f | pv > %c.tar,
	\ {Compress (background) as sqlar}
	\ tsp sqlite3 %c:r.sqlar -Acv %f,
fileviewer <inode/directory>
	\ show-dir %c:p,

" => File associations: all files --------------------------------------------------------------------------------- {{{1

fileviewer !<inode/directory>
	\ show-file %c:p,

" => Save state between sessions ---------------------------------------------------------------------------------- {{{1

" What should be saved automatically between vifm sessions. Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
" set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,phistory,fhistory,dirstack,registers,bookmarks,bmarks
set vifminfo=bmarks,bookmarks,chistory,dhistory,dirstack,fhistory,phistory,registers,savedirs,shistory,state

" => Examples of configuring both panels -------------------------------------------------------------------------- {{{1

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" => mappings ----------------------------------------------------------------------------------------------------- {{{1

" disable undo keybinding
nnoremap u <nop>
vnoremap u <nop>

nnoremap L :edit %"c %n<CR>

nnoremap <Esc> :hideui<CR>

" Start shell in current directory
nnoremap s :shell<CR>

" Display sorting dialog
nnoremap S :sort<CR>

" Toggle visibility of preview window
nnoremap w :view<CR>
vnoremap w :view<CR>gv

" Open file in existing instance of gvim
nnoremap o :!gvim --remote-tab-silent %f<CR>
" Open file in new instance of gvim
nnoremap O :!gvim %f<CR>

" Open file in the background using its default program
nnoremap gb :file &<CR>l

" Interaction with system clipboard
" Yank current directory path into the clipboard
nnoremap yd :!echo -n %d   %i | clipcopy<CR>
" Yank current file path into the clipboard
nnoremap yp :!echo -n %c:p %i | clipcopy<CR>
" yank current filename without path and extension into the clipboard
nnoremap yn :!echo -n %c:r %i | clipcopy<CR>
" yank current filename without path into the clipboard
nnoremap yf :!echo -n %c   %i | clipcopy<CR>

" Mappings for faster renaming
nnoremap A  cw
nnoremap I  cw<c-a>
nnoremap cc cw<c-u>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<CR>

" Open console in current directory
nnoremap ,t :!exo-open --launch TerminalEmulator &<CR>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<CR>

" Example of standard two-panel file managers mappings
nnoremap <f2>  :file<CR>
nnoremap <f3>  :!{ show-dir %c || show-file %c } | less<CR>
nnoremap <f4>  :edit %"c %n<CR>
nnoremap <f5>  :copy<CR>
nnoremap <f6>  :move<CR>
nnoremap <f7>  :mkdir<SPACE>
nnoremap <f8>  :delete<CR>
nnoremap <f10> :quit<CR>
nnoremap <c-@> :sync<CR>

nnoremap [t    :tabprev<CR>
nnoremap ]t    :tabnext<CR>

nnoremap <silent> rp :!tsp rsync-copy --info=name1               %f:p %D/ %i &<CR>
vnoremap <silent> rp :!tsp rsync-copy --info=name1               %f:p %D/ %i &<CR>
nnoremap <silent> ru :!tsp rsync-copy --info=name1 -u            %f:p %D/ %i &<CR>
vnoremap <silent> ru :!tsp rsync-copy --info=name1 -u            %f:p %D/ %i &<CR>
nnoremap <silent> rs :!tsp rsync-copy --info=name1 -uXx --delete %f:p %D/ %i &<CR>
vnoremap <silent> rs :!tsp rsync-copy --info=name1 -uXx --delete %f:p %D/ %i &<CR>
nnoremap <silent> rP :!tsp rsync-move --info=name1 %f:p %D/ && tsp -d rmdir-recursive %f %i &<CR>
vnoremap <silent> rP :!tsp rsync-move --info=name1 %f:p %D/ && tsp -d rmdir-recursive %f %i &<CR>

nnoremap RD :!rsync-diff --checksum                     %f:p %D/ %i &<CR>
vnoremap RD :!rsync-diff --checksum                     %f:p %D/ %i &<CR>
nnoremap Rd :!rsync-diff                                %f:p %D/ %i &<CR>
vnoremap Rd :!rsync-diff                                %f:p %D/ %i &<CR>
nnoremap Rp :!rsync-copy --info=progress2               %f:p %D/ %i &<CR>
vnoremap Rp :!rsync-copy --info=progress2               %f:p %D/ %i &<CR>
nnoremap Ru :!rsync-copy --info=progress2 -u            %f:p %D/ %i &<CR>
vnoremap Ru :!rsync-copy --info=progress2 -u            %f:p %D/ %i &<CR>
nnoremap Rs :!rsync-copy --info=progress2 -uXx --delete %f:p %D/ %i &<CR>
vnoremap Rs :!rsync-copy --info=progress2 -uXx --delete %f:p %D/ %i &<CR>

" => fzf integration (ctrl-t, ctrl-p) ----------------------------------------------------------------------------- {{{1

command! FZFcd     :set noquickview | :execute 'cd "'.system('unset REPORTTIME; _fzf_compgen_helper "~" d | fzf --reverse 2>/dev/tty || echo "%c"').'"%IU' | redraw
command! FZFfind   :set noquickview | :execute 'goto "'.system('unset REPORTTIME; _fzf_compgen_helper "." f | fzf --reverse 2>/dev/tty || echo "%c"').'"%IU' | redraw
command! FZFlocate :set noquickview | :execute 'goto "'.system('unset REPORTTIME; command locate / | fzf --reverse 2>/dev/tty || echo "%c"').'"%IU' | redraw

nnoremap <A-c> :FZFcd<CR>
nnoremap <C-p> :FZFfind<CR>
nnoremap <C-t> :FZFlocate<CR>

" => Various customization examples ------------------------------------------------------------------------------- {{{1

" Use ag (the silver searcher) instead of grep
" set grepprg='ag --hidden --line-numbers %i %a %s'
set grepprg='rg %i %a %s %u'

" set findprg="find %s %a -print , -type d \( ! -readable -o ! -executable \) -prune"
set findprg='fd -H %A %u'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" => bookmarks ---------------------------------------------------------------------------------------------------- {{{1

mark a ~/.local/share/rest-console
mark b ~/.local/script
mark c ~/git/private/dotfiles                    .config
mark d ~/git/private/dotfiles/submodules/private ssh
mark h ~
mark m /media/nfs/home
mark r \/
mark s ~/.local/share
mark t ~/.local/state
mark u $XDG_RUNTIME_DIR
mark v ~/git/private/dotfiles/.config/nvim       init.lua

" => file icons --------------------------------------------------------------------------------------------------- {{{1

" set classify=' ::../::, :dir:/, :exe:, :reg:, :link:'
" set classify+=' ::.editorconfig,,.eslintrc.js,,.eslintrc.json,,.npmrc,,.nvmrc,,.prettierrc.js,,.prettierrc.yaml,,package.json,,project.json,,tsconfig*.json::'
" set classify+=' ::package-lock.json::'
" set classify+=' ::*.sh::, ::*.cpp::, ::*.c::, ::*.hpp::, ::*.js::, ::*.pl,,*.pm::, ::*.py::, ::*.rb::, ::*.go::, ::*.json::, ::*.ts::,󰢱 ::*.lua::'
" set classify+='© ::/^copying|license$/::, ::.git/,,*.git/::'
" set classify+=' ::*.fb2,,*.epub,,*.djvu,,*.pdf::'
" set classify+=' ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::, ::*.ppt,,*.pptx::'
" set classify+=' ::*.7z,,*.ace,,*.arj,,*.bz2,,*.cpio,,*.dz,,*.gz,,*.jar,,*.lzh,,*.lzma,,*.rar,,*.rz,,*.sqlar,,*.tar,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2,,*.zst,,*.tzst,,*.xz,,*.z,,*.zip,,*.zoo::, ::*.deb::, ::*.rpm::, ::*.whl::'
" set classify+=' ::*.bmp,,*.gif,,*.jp2,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd,,*.svg,,*.svgz::'
" set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
" set classify+=' ::*.avi,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv,,*.mov,,*.mp4,,*.lrv,,*.flv::'
" set classify+=' ::*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::'
" set classify+=' ::*.htm,,*.html,,*.[msx]html,,*.mht,,*.xml::'
" set classify+=' ::*.diff,,*.patch::'
" set classify+=' ::*.img,,*.iso::'
" set classify+=' ::*.torrent::'
" set classify+=' ::.gitignore,,.npmignore,,.eslintignore::'
