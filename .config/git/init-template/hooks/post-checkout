#!/usr/bin/env bash

set -Eeuo pipefail

# ABSTRACT: initialize git hooks after clone if hooks dir is provided by repo

# man: githooks

hooks_dir="hooks"
default_branch="main"

if [[ "${1:-}" == '0000000000000000000000000000000000000000' && "${3:-}" == '1' ]]; then # clone
	# this hook is always executed with cwd of cloned repo root

	remote_branch="$(git rev-parse --verify --abbrev-ref '@{upstream}' --symbolic-full-name)"
	IFS="/" read -r <<< "$remote_branch" remote branch

	if [[ "$branch" != "$default_branch" ]]; then
		echo "> the main branch is '$branch', setting up alias for it as '$default_branch'" >&2
		git symbolic-ref "refs/heads/$default_branch" "refs/heads/$branch"
		git symbolic-ref "refs/remotes/$remote/$default_branch" "refs/remotes/$remote/$branch"
	fi

	if [[ -d "./$hooks_dir" && -e "./$hooks_dir/autoinstall" ]]; then
		option="$(< "./$hooks_dir/autoinstall")"
		if [[ "$option" == 'replace' ]]; then
			echo "> repo provides own hooks, replacing default hooks with them" >&2
			rm -rf './.git/hooks'
			if ln -srf "./$hooks_dir" './.git/hooks'; then
				echo "> successfully replaced hooks with repo-provided hooks" >&2
			else
				echo "> error: failed to replace hooks" >&2
			fi
		else
			echo "> repo provides own hooks, merging them with default hooks" >&2
			installed_hooks=()
			for it in "./$hooks_dir"/*; do
				if [[ ! "$it" =~ autoinstall$ ]]; then
					if ln -srf "$it" './.git/hooks/'; then
						installed_hooks+=("$(basename "$it")")
					else
						echo "> error: failed to install hook: $(basename "$it")" >&2
					fi
				fi
			done
			if [[ ${#installed_hooks[@]} -gt 0 ]]; then
				echo "> successfully installed hooks: ${installed_hooks[*]}" >&2
			fi
		fi
	fi
fi
