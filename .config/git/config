[alias]
	aa           = add --all
    amend        = commit --amend --reset-author
	b            = branch -vv
	behind       = !"f(){ mu=\"$(git main-upstream)\"; echo \"Behind $mu:\" >&2; git log --oneline \"${1:-HEAD}..$mu\" | wc -l; }; f"
	branches     = !"git branch --list --no-column --format='%(refname:lstrip=2)'"
	browse       = !"git-browse"
	brs          = !"gl --mode branches"
	bush         = !"f(){ while true; do git push && break; git pull --no-tags --rebase || break; done }; f"
	cl           = clone --filter=blob:none
	commit-again = !"git commit -eF \"$(git root)/.git/COMMIT_EDITMSG\""
    date-copy    = !"f(){ git-x-amend -kD \"${1:-HEAD}\"; }; f"
	d            = -c delta.side-by-side=true diff --ignore-space-change
	dc           = -c delta.side-by-side=true diff --ignore-space-change --cached
	dd           = -c delta.side-by-side=true diff
	ddc          = -c delta.side-by-side=true diff --cached
	df           = !"git-diff-full --ignore-space-change"
	ds           = diff --ignore-space-change --submodule=diff
	dt           = difftool
	dtg          = difftool --gui
	f            = !"fzf-git-log-branch"
	fa           = !"fzf-git-log-all"
	fag          = !"fzf-git-log-all-graph"
	fam          = !"fzf-git-log-all-merges"
	fall         = fetch --all --force
	fg           = !"fzf-git-log-branch-graph"
	fh           = !"cd -- \"${GIT_PREFIX:-.}\" && GIT_PREFIX="" fzf-git-file-show-history"
	fr           = !"fzf-git-log-reflog"
	ha           = !"git --no-pager log --abbrev-commit --all --color=always --graph --pretty=oneline --topo-order"
	l            = !"git-log-branch"
	la           = !"git-log-all"
	lag          = !"git-log-all-graph"
	lam          = !"git-log-all-merges"
	lg           = !"git-log-branch-graph"
	lr           = !"git-log-reflog"
	m            = !"git checkout \"$(git main-branch)\""
	m-base       = !"f(){ git merge-base \"${1:-$(git main-branch)}\" HEAD; }; f"
	m-diff       = !"f(){ git diff     --ignore-space-change --color=always `git m-span .. $@`; }; f"
	m-dt         = !"f(){ git difftool --ignore-space-change -t vimdiff     `git m-span .. $@`; }; f"
	m-log        = !"f(){ git log                            --color=always `git m-span .. $@`; }; f"
	m-span       = !"git-merge-span"
	mrs          = !"gl"
	mt           = mergetool
	mt4          = mergetool --tool=nvimdiff4
	mtg          = mergetool --gui
	p            = push --force-with-lease
	pall         = !"git-push-all"
	pub          = !"git push -u origin \"$(git bname)\" -o merge_request.create -o merge_request.remove_source_branch"
	puba         = !"git push -u origin \"$(git bname)\" -o merge_request.create -o merge_request.remove_source_branch -o merge_request.merge_when_pipeline_succeeds"
	s            = !"fzf-git-search"
	sf           = !"fzf-git-search-file"
	sh           =                            show --show-signature --color=always --ignore-space-change --stat --pretty=fuller --dd --minimal --patch
	shd          = -c delta.side-by-side=true show --show-signature --color=always --ignore-space-change --stat --pretty=fuller --dd --minimal --patch
	sm           = !"fzf-git-search-message"
	st           = status -b
	unpub        = !"git push origin \":$(git bname)\""
	untag        = !"git push origin \":$(git describe --exact-match --tags)\""
	up           = pull
	wd           = !"f(){ git diff     --ignore-space-change --color=always \"$(git main-branch)...${1:-HEAD}\"; }; f"
	wdt          = !"f(){ git difftool --ignore-space-change -t vimdiff     \"$(git main-branch)...${1:-HEAD}\"; }; f"
	wf           = !"f(){ fzf-git-log-branch \"$(git main-branch)..${1:-HEAD}\"; }; f"
	what         = whatchanged --show-signature
	wl           = !"f(){ git-log-branch \"$(git main-branch)..${1:-HEAD}\"; }; f"
	wredo        = !"git rebase -i --autosquash --keep-base --committer-date-is-author-date --update-refs `git main-branch`"

	### helper (almost never used directly) ----------------------------------------------------------------------------

	# git rev-parse --abbrev-ref --symbolic-full-name HEAD

	main-branch   = !"git show-ref main master trunk | grep -Pom1 '(?:refs/heads/)\\K.*'"
	main-head     = !"f(){ git show-ref HEAD | grep 'refs/remotes/'\"$(git main-remote)\" | grep -Po '(?<=\\brefs/remotes/).*' | sort -r | head -1; }; f"
	# detect main remote by main branch
	main-remote   = !"f(){ git config --local --get \"branch.$(git main-branch).remote\" 2>/dev/null; }; f"
	# detect main remote name by refs/remotes/.../HEAD
	;main-remote   = !"git show-ref 2>/dev/null | grep -Po '(?<=\\brefs/remotes/)[^\\/]+(?=/HEAD\\b)' | sort -r | head -1"
	# detect main upstream branch
	main-upstream = !"git pbranch \"$(git main-head)\""

    ant   =            name-rev --always --name-only --no-undefined --annotate-stdin        --exclude=HEAD --exclude='remotes/*'
    ant2  =            name-rev --always --name-only --no-undefined --annotate-stdin        --exclude=HEAD
	name  = !"f(){ git name-rev --always --name-only --no-undefined                         --exclude=HEAD ${@:-HEAD}; }; f"
	rname = !"f(){ git name-rev --always --name-only --no-undefined --refs='refs/remotes/*' --exclude=HEAD ${@:-HEAD}; }; f"
	# print current branch
	bname = branch --show-current
	; brname        = !"f(){ git rname \"${@:-HEAD}\" 2>/dev/null | grep -Po \"(?<=\\bremotes/).+$\"; }; f"

	# print upstream
	current-upstream = rev-parse --symbolic-full-name @{upstream}
	# detect current remote name by current upstream
	current-remote   = !"f(){ git current-upstream | perl -pE 's{^refs\\/remotes\\/(.+?)\\/.+}{\\1}x'; }; f"
	; # detect current remote name by branch in .git/config
	; current-remote   = !"f(){ git config --local --get \"branch.$(git pbranch \"${@:-HEAD}\").remote\" 2>/dev/null; }; f"

    author-date = show -s --format=%aI
    commit-date = show -s --format=%cI
	# print branch name
	pbranch     = !"f(){ git rev-parse --verify --abbrev-ref \"${@:-HEAD}\" 2>/dev/null; }; f"
	# print commit
	pcommit     = !"f(){ git rev-parse --verify              \"${@:-HEAD}\" 2>/dev/null; }; f"
	pdesc       = !"f(){ git describe --always \"${@:-HEAD}\"; }; f"
	# print root of the repo
	root        = !"git rev-parse --show-superproject-working-tree --show-toplevel | head -1"
	root2       = !"git rev-parse                                  --show-toplevel | head -1"

	### care taking ----------------------------------------------------------------------------------------------------

    remove-gone  = !"git b | perl -alE 'm/: gone]/ && $F[0] ne q(*) && qx(git branch -D $F[0])'"
	# remove all local branches which are removed upstream
	bleach       = !"git fall && git remove-gone"
	# remove local branches and tags which are removed upstream for current remote
	fp           = !"git fetch --prune --prune-tags && git remove-gone"
	# vacuum repo, clean reflog, compress packs
	compress     = !"git-compress"
	compress-a   = !"git-compress-aggressive"
	# restore-origin-head = symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/master
	remove-remote-head  = !"f(){ git remote set-head -d     \"${@:-$(git current-remote)}\"; }; f"
	restore-remote-head = !"f(){ git remote set-head --auto \"${@:-$(git current-remote)}\"; }; f"

    rewrite-history       = rebase -i --committer-date-is-author-date --force --no-update-refs --empty=keep --exec 'git-x-amend -rd'
    rewrite-history-as-me = rebase -i --committer-date-is-author-date --force --no-update-refs --empty=keep --exec 'git-x-amend -rdA'

	### experimental ---------------------------------------------------------------------------------------------------

    add-main-if-master-is-required = !"git symbolic-ref refs/heads/main refs/heads/master && git symbolic-ref refs/remotes/origin/main refs/remotes/origin/master"
    add-main-if-trunk-is-required = !"git symbolic-ref refs/heads/main refs/heads/trunk && git symbolic-ref refs/remotes/origin/main refs/remotes/origin/trunk"
	add-mr-refs  = config --local --add remote.origin.fetch '+refs/merge-requests/*/head:refs/remotes/origin/merge-requests/*/head'
	make-shallow = !"git fetch --prune-tags --prune; git tag -d \"$(git tag -l)\"; git reflog expire --expire=all --all; git gc --prune=all"

[apply]
	whitespace = fix

[blame]
	ignoreRevsFile      = ~/.config/git/global-blame-ignore-revs
	markUnblamableLines = true
	; ignoreRevsFile = .git-blame-ignore-revs

[clone]
	rejectShallow = true

[core]
	; abbrev         = 8
	autocrlf       = false
	; editor         = vi
	fsmonitor      = true
	longpaths      = true
	pager          = less
	preloadindex   = true
	quotepath      = false
	tabwidth       = 4
	untrackedcache = true
	whitespace     = trailing-space,space-before-tab,blank-at-eol,blank-at-eof,cr-at-eol

[diff]
	algorithm       = minimal
	colorMoved      = true
	colorMovedWS    = ignore-all-space
	guitool         = meld
	indentHeuristic = true
	submodule       = diff
	tool            = fugitive

[difftool]
	prompt        = false
	trustExitCode = true                                                       # be able to abort all diffs with ':cq' or ':cquit'

[difftool "fugitive"]
	cmd = vi -f -c "Gdiffsplit!" "$MERGED"

[difftool "vimdiff"]
	cmd = vimdiff "$LOCAL" "$REMOTE"

[difftool "meld"]
	cmd = meld "$LOCAL" "$REMOTE"

[fetch]
	parallel         = 0
	prune            = true
	pruneTags        = false
	writeCommitGraph = true

[format]
	pretty = commit %H%d %(describe:tags) %nAuthor: [%ai] %aN <%aE>%nCommit: [%ci] %cN <%cE>%n%n%B

[gc]
	auto = 0

[grep]
	extendedRegexp = true
	lineNumber     = true
	patternType    = perl

[gpg "ssh"]
	allowedSignersFile = ~/.config/git/allowed_signers

[gui]
	encoding = utf-8

[init]
	defaultBranch = main
	templatedir = ~/.config/git/init-template

[help]
	autocorrect = prompt

[http]
	sslVerify = true

[log]
	color    = auto
	date     = iso8601
	decorate = short
	follow   = true

[merge]
	conflictstyle = zdiff3
	guitool       = meld
	tool          = fugitive

[mergetool]
	keepBackup    = false
	prompt        = false
	trustExitCode = true

[mergetool "fugitive"]
	cmd = vi -f -c "Gdiffsplit!" "$MERGED"

[mergetool "meld"]
	cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"

[mergetool "nvimdiff4"]
	cmd = nvim -d "$LOCAL" "$BASE" "$REMOTE" "$MERGED" -c 'windo setlocal nomodifiable' -c '$wincmd w' -c 'setlocal modifiable' -c 'wincmd J'

[pager]
	branch = false

[pull]
	rebase = true

[push]
	autoSetupRemote = true
	followTags      = false

[rebase]
	abbreviateCommands  = true
	autoSquash          = true
	autoStash           = true
	missingCommitsCheck = warn
	stat                = true
	updateRefs          = true

[rerere]
	autoUpdate = true
	enabled    = true

[status]
	showStash = true

[tag]
	sort = version:refname

[include]
	path = ~/.config/gitconfig.overrides
	path = ~/.config/gitconfig.delta
