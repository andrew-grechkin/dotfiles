#!/usr/bin/env -S just --justfile

# https://just.systems/man/en/

@default:
	just --list --justfile {{justfile()}}

[no-cd]
backup-all:
	#!/usr/bin/env bash

	set -Eeuo pipefail

	for volume in "home"; do
		just --justfile {{justfile()}} backup "$volume"
	done

[no-cd]
backup volume:
	#!/usr/bin/env bash

	set -Eeuo pipefail

	declare -A targets=(
		[home]='/volumes/backup/ssd4t'
	)

	volume="{{volume}}"
	target="${targets[$volume]}"

	selector='select(
		.active == false
		and .default == false
		and .date != ""
		and .type == "single"
		and .cleanup == "number"
		and has("userdata")
		and (.userdata | has("important"))
		and (.userdata | has("id"))
		and (.userdata.important == "yes")
	)'

	history="$(snapper -c "$volume" --jsonout ls | jq -Sc ".$volume | sort_by(.date) | reverse | map($selector)")"
	amount="$(jq -r '. | length' <<< "$history")"

	if (( amount > 0 )); then
		for i in $(seq 0 1 $(( amount - 1 ))); do
			current="$(jq -r ".[$i]" <<< "$history")"
			current_number="$(jq -r '.number' <<< "$current")"
			current_id="$(jq -r '.userdata.id' <<< "$current")"
			subvolume="$(jq -r '.subvolume' <<< "$current")"

			if [[ -d "$target/$volume/$current_id/snapshot" ]]; then
				parent=(-p "$subvolume/.snapshots/$current_number/snapshot")
				break
			fi
		done

		jq -SC <<< "$current"

		target_id="$(date --universal --rfc-3339=seconds)"
		if id=$(snapper -c "$volume" create -p -c "number"); then
			mkdir -p "$target/$volume/$target_id"
			sudo -S btrfs send "${parent[@]}" "$subvolume/.snapshots/$id/snapshot" \
			| sudo -S btrfs receive "$target/$volume/$target_id/"
			snapper -c "$volume" modify -d "backup" -u "important=yes,id=$target_id" "$id"
			# | pv -Wba
			exit 0
		fi
	else
		snapper -c "$volume" create -p -c "number" -d "backup" -u important=yes
		exit 0
	fi

	exit 1

[no-cd]
prepare-btrfs-partition device label prefix:
	#!/usr/bin/env bash
	set -Eeuo pipefail

	if (( EUID > 0 )); then
		echo 'This operation will destroy data on {{device}}' >&2
		exec sudo -k "$0" "$@"
	fi

	umask '0022'
	trap 'umount -R "/mnt-{{label}}"; rmdir "/mnt-{{label}}"' EXIT
	mkdir                              '/mnt-{{label}}'

	wipefs -a                 '{{device}}'
	mkfs.btrfs -L '{{label}}' '{{device}}'

	current='/mnt-{{label}}/{{prefix}}/.snapshots/current'

	mount -L '{{label}}' -o subvolid=5 '/mnt-{{label}}'
	mkdir -p                           '/mnt-{{label}}/{{prefix}}'
	btrfs subvolume create             '/mnt-{{label}}/{{prefix}}/.snapshots'
	mkdir -p                           "$current"
	btrfs subvolume create             "$current/snapshot"

	if [[ {{label}} =~ ^var ]]; then
		chattr +C "$current/snapshot"
	fi

	chmod a+rX,g+ws                    "$current/snapshot"
	mkdir  -p                          "$current/snapshot/.snapshots"

	# cat <<HEREDOC > "$current/info.xml"
	# <?xml version="1.0"?>
	# <snapshot>
	#   <type>single</type>
	#   <num>1</num>
	#   <date>$(/usr/bin/date --rfc-3339=seconds)</date>
	#   <description>first root filesystem</description>
	# </snapshot>
	# HEREDOC

	if [[ {{prefix}} = "@" ]]; then
		btrfs subvolume set-default  "$current/snapshot"
	fi

[no-cd]
prepare-btrfs-cache user:
	#!/usr/bin/env bash
	set -Eeuo pipefail

	cache=~{{user}}/.cache
	u="$(id -un {{user}})"
	g="$(id -gn {{user}})"

	if [[ -e "$cache" ]]; then
		echo "Cache already exists: $cache" >&2
		exit 1
	fi

	if (( EUID > 0 )); then
	    exec sudo "$0" "$@"
	fi

	umask '0002'

	btrfs subvolume create     "$cache"
	chown "$u:$g"          -Rc "$cache"
	chmod a+rX,ug+w,g+s    -Rc "$cache"
	chattr +C              -R  "$cache"

[no-cd]
@init-nodejs:
	rsync-copy ~/.local/share/skel/nodejs/ ./

[no-cd]
@init-ts-app:
	rsync-copy ~/.local/share/skel/ts-app/ ./
	npm install --no-audit --no-fund

[no-exit-message]
@audio dir="/media/nfs/home/music":
	just -g audio-list "{{dir}}" | fzf-execute

[no-exit-message]
@books dir="/media/nfs/home/doc/@technical":
	just -g books-list "{{dir}}" | fzf-execute

[no-exit-message]
@films dir="/media/nfs/home/video":
	just -g films-list "{{dir}}" | fzf-execute

[no-exit-message]
audio-list dir="/media/nfs/home/music":
	#!/usr/bin/env bash
	set -Eeuo pipefail

	{
		cd "{{dir}}"
		while read -r line; do
			echo -e "$line\tmpv --quiet --no-osc --term-osd=force --no-audio-display -- \"{{dir}}/$line\""
		done < <(fd -t dir --min-depth 2 --max-depth 4 --relative-path)
	} | sort

[no-exit-message]
books-list dir="/media/nfs/home/doc/@technical":
	#!/usr/bin/env bash
	set -Eeuo pipefail

	{
		cd "{{dir}}"
		while read -r LINE; do
			if [[ "$LINE" =~ \.pdf$|\.djvu$ ]]; then
				echo -e "$LINE\tzathura - <\"{{dir}}/$LINE\""
			elif [[ "$LINE" =~ \.fb2$|\.epub$|\.ePub$ ]]; then
				echo -e "$LINE\txdg-open \"{{dir}}/$LINE\""
			fi
		done < <(fd --no-ignore -t file -e pdf -e djvu -e fb2 -e epub --relative-path)
	} | sort

[no-exit-message]
films-list dir="/media/nfs/home/video":
	#!/usr/bin/env bash
	set -Eeuo pipefail

	{
		cd "{{dir}}"
		while read -r line; do
			echo -e "$line\tmpv --quiet -- \"{{dir}}/$line\""
		done < <(fd -t file -e webm -e mkv -e avi -e mp4 -e ts --relative-path)
	} | sort
